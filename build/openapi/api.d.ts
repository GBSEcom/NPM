/**
 * Payment Gateway API Specification.
 * The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.
 *
 * OpenAPI spec version: 6.6.0.20190329.001
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/// <reference path="../../src/openapi/custom.d.ts" />
import { Configuration } from "./configuration";
import { AxiosPromise, AxiosInstance } from 'axios';
/**
 *
 * @export
 */
export declare const COLLECTION_FORMATS: {
    csv: string;
    ssv: string;
    tsv: string;
    pipes: string;
};
/**
 *
 * @export
 * @interface RequestArgs
 */
export interface RequestArgs {
    url: string;
    options: any;
}
/**
 *
 * @export
 * @class BaseAPI
 */
export declare class BaseAPI {
    protected basePath: string;
    protected axios: AxiosInstance;
    protected configuration: Configuration | undefined;
    constructor(configuration?: Configuration, basePath?: string, axios?: AxiosInstance);
}
/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export declare class RequiredError extends Error {
    field: string;
    name: "RequiredError";
    constructor(field: string, msg?: string);
}
/**
 * The processor address validation response for compliance.
 * @export
 * @interface AVSResponse
 */
export interface AVSResponse {
    /**
     * Response if street matches that on file.
     * @type {string}
     * @memberof AVSResponse
     */
    streetMatch?: AVSResponse.StreetMatchEnum;
    /**
     * Response if postal code matches that on file.
     * @type {string}
     * @memberof AVSResponse
     */
    postalCodeMatch?: AVSResponse.PostalCodeMatchEnum;
}
/**
 * @export
 * @namespace AVSResponse
 */
export declare namespace AVSResponse {
    /**
     * @export
     * @enum {string}
     */
    enum StreetMatchEnum {
        Y = "Y",
        N = "N",
        NOINPUTDATA = "NO_INPUT_DATA",
        NOTCHECKED = "NOT_CHECKED"
    }
    /**
     * @export
     * @enum {string}
     */
    enum PostalCodeMatchEnum {
        Y = "Y",
        N = "N",
        NOINPUTDATA = "NO_INPUT_DATA",
        NOTCHECKED = "NOT_CHECKED"
    }
}
/**
 * Access token generation response.
 * @export
 * @interface AccessTokenResponse
 */
export interface AccessTokenResponse {
    /**
     * Access token for authentication.
     * @type {string}
     * @memberof AccessTokenResponse
     */
    accessToken?: string;
    /**
     * Echoes back the value from the request header for tracking.
     * @type {string}
     * @memberof AccessTokenResponse
     */
    clientRequestId?: string;
    /**
     * The result of the requested operation. If this is anything other than 'SUCCESS', please refer to the 400s HTTP error codes. See ErrorResponse object for details.
     * @type {string}
     * @memberof AccessTokenResponse
     */
    requestStatus?: AccessTokenResponse.RequestStatusEnum;
}
/**
 * @export
 * @namespace AccessTokenResponse
 */
export declare namespace AccessTokenResponse {
    /**
     * @export
     * @enum {string}
     */
    enum RequestStatusEnum {
        SUCCESS = "SUCCESS"
    }
}
/**
 * Details related to updated account information.
 * @export
 * @interface AccountUpdaterResponse
 */
export interface AccountUpdaterResponse {
    /**
     * Account updater replacement PAN or TransArmor token.
     * @type {string}
     * @memberof AccountUpdaterResponse
     */
    updatedCard?: string;
    /**
     * Updated value of token.
     * @type {string}
     * @memberof AccountUpdaterResponse
     */
    updatedToken?: string;
    /**
     * New account number expiration date in MMYY format.
     * @type {string}
     * @memberof AccountUpdaterResponse
     */
    updatedExpirationDate?: string;
    /**
     * Status of the updated account. An account may have closed (C), the expiry date may have changed (E), the account may have changed (A), or the cardholder should be contacted (Q).
     * @type {string}
     * @memberof AccountUpdaterResponse
     */
    updatedAccountStatus?: string;
    /**
     * Code for the error encountered when updating account.
     * @type {string}
     * @memberof AccountUpdaterResponse
     */
    updatedAccountErrorCode?: string;
}
/**
 * Rate and corresponding amount being applied to purchase cards, for instance in the form of taxes or discounts.
 * @export
 * @interface AdditionalAmountRate
 */
export interface AdditionalAmountRate {
    /**
     * Amount in 3 decimal 12 bytes total digit.
     * @type {number}
     * @memberof AdditionalAmountRate
     */
    amount: number;
    /**
     * Rate in 3 decimal 12 bytes total digit.
     * @type {number}
     * @memberof AdditionalAmountRate
     */
    rate: number;
}
/**
 * Merchant supplied tracking numbers.
 * @export
 * @interface AdditionalDetails
 */
export interface AdditionalDetails {
    /**
     * Comments for the payment.
     * @type {string}
     * @memberof AdditionalDetails
     */
    comments?: string;
    /**
     * Invoice number.
     * @type {string}
     * @memberof AdditionalDetails
     */
    invoiceNumber?: string;
    /**
     * Purchase order number.
     * @type {string}
     * @memberof AdditionalDetails
     */
    purchaseOrderNumber?: string;
}
/**
 * Additional transaction details for transaction response.
 * @export
 * @interface AdditionalTransactionDetails
 */
export interface AdditionalTransactionDetails {
    /**
     * Comment for the payment.
     * @type {string}
     * @memberof AdditionalTransactionDetails
     */
    comments?: string;
    /**
     * Invoice number.
     * @type {string}
     * @memberof AdditionalTransactionDetails
     */
    invoiceNumber?: string;
    /**
     * Purchase order number.
     * @type {string}
     * @memberof AdditionalTransactionDetails
     */
    purchaseOrderNumber?: string;
}
/**
 * Model for address information.
 * @export
 * @interface Address
 */
export interface Address {
    /**
     * Company name associated with the address.
     * @type {string}
     * @memberof Address
     */
    company?: string;
    /**
     * First line of the street address.
     * @type {string}
     * @memberof Address
     */
    address1?: string;
    /**
     * Second line of the street address.
     * @type {string}
     * @memberof Address
     */
    address2?: string;
    /**
     * City or locality.
     * @type {string}
     * @memberof Address
     */
    city?: string;
    /**
     * State or province.
     * @type {string}
     * @memberof Address
     */
    region?: string;
    /**
     * ZIP code or postal code.
     * @type {string}
     * @memberof Address
     */
    postalCode?: string;
    /**
     * ISO-3166-1  ALPHA-2, ALPHA-3, numeric or full country name. In the case of PaySecure endpoints, pass the country code in an ISO format.
     * @type {string}
     * @memberof Address
     */
    country?: string;
}
/**
 * Additional data specific to the airline industry.
 * @export
 * @interface Airline
 */
export interface Airline {
    /**
     * The passenger name associated with the transaction.
     * @type {string}
     * @memberof Airline
     */
    passengerName?: string;
    /**
     * The airline ticket number associated with the transaction.
     * @type {string}
     * @memberof Airline
     */
    ticketNumber?: string;
    /**
     * The carrier that issued the ticket.
     * @type {string}
     * @memberof Airline
     */
    issuingCarrier?: string;
    /**
     * The carrier associated with the transaction.
     * @type {string}
     * @memberof Airline
     */
    carrierName?: string;
    /**
     * The IATA code associated with the travel agency.
     * @type {string}
     * @memberof Airline
     */
    travelAgencyIataCode?: string;
    /**
     * The business name of the travel agency.
     * @type {string}
     * @memberof Airline
     */
    travelAgencyName?: string;
    /**
     * The airline plan number associated with the transaction.
     * @type {string}
     * @memberof Airline
     */
    airlinePlanNumber?: string;
    /**
     * The invoice number used by the airline.
     * @type {string}
     * @memberof Airline
     */
    airlineInvoiceNumber?: string;
    /**
     * The reservation system used to create the ticket.
     * @type {string}
     * @memberof Airline
     */
    reservationSystem?: Airline.ReservationSystemEnum;
    /**
     * If the transaction is associated with a restricted class fare.
     * @type {boolean}
     * @memberof Airline
     */
    restricted?: boolean;
    /**
     * Array containing up to 4 items that describe the route associated with the transaction.
     * @type {Array<AirlineTravelRoute>}
     * @memberof Airline
     */
    travelRoute?: Array<AirlineTravelRoute>;
    /**
     * The number of any other tickets associated with the transaction ticket.
     * @type {string}
     * @memberof Airline
     */
    relatedTicketNumber?: string;
    /**
     * Identify the purchase of ancillary goods or services with a false value. If this element is not provided, the transaction is assumed to be a purchase of an airline ticket.
     * @type {Array<AirlineAncillaryServiceCategory>}
     * @memberof Airline
     */
    ancillaryServiceCategory?: Array<AirlineAncillaryServiceCategory>;
    /**
     * Identifies if the transaction is a ticket purchase.
     * @type {boolean}
     * @memberof Airline
     */
    ticketPurchase?: boolean;
}
/**
 * @export
 * @namespace Airline
 */
export declare namespace Airline {
    /**
     * @export
     * @enum {string}
     */
    enum ReservationSystemEnum {
        START = "START",
        TWA = "TWA",
        DELTA = "DELTA",
        SABRE = "SABRE",
        COVIAAPOLLO = "COVIA_APOLLO",
        DRBLANK = "DR_BLANK",
        DER = "DER",
        TUI = "TUI"
    }
}
/**
 *
 * @export
 * @interface AirlineAncillaryServiceCategory
 */
export interface AirlineAncillaryServiceCategory {
    /**
     * Identifies the service purchased in the transaction if not a base ticket
     * @type {string}
     * @memberof AirlineAncillaryServiceCategory
     */
    serviceCategory: AirlineAncillaryServiceCategory.ServiceCategoryEnum;
}
/**
 * @export
 * @namespace AirlineAncillaryServiceCategory
 */
export declare namespace AirlineAncillaryServiceCategory {
    /**
     * @export
     * @enum {string}
     */
    enum ServiceCategoryEnum {
        BUNDLEDSERVICE = "BUNDLED_SERVICE",
        BAGGAGEFEE = "BAGGAGE_FEE",
        CHANGEFEE = "CHANGE_FEE",
        CARGO = "CARGO",
        CARBONOFFSET = "CARBON_OFFSET",
        FREQUENTFLYER = "FREQUENT_FLYER",
        GIFTCARD = "GIFT_CARD",
        GROUNDTRANSPORT = "GROUND_TRANSPORT",
        INFLIGHTENTERTAINMENT = "IN_FLIGHT_ENTERTAINMENT",
        LOUNGE = "LOUNGE",
        MEDICAL = "MEDICAL",
        MEALBEVERAGE = "MEAL_BEVERAGE",
        OTHER = "OTHER",
        PASSENGERASSISTFEE = "PASSENGER_ASSIST_FEE",
        PETS = "PETS",
        SEATFEES = "SEAT_FEES",
        STANDBY = "STANDBY",
        SERVICEFEE = "SERVICE_FEE",
        STORE = "STORE",
        TRAVELSERVICE = "TRAVEL_SERVICE",
        UNACCOMPANIEDTRAVEL = "UNACCOMPANIED_TRAVEL",
        UPGRADES = "UPGRADES",
        WIFI = "WI_FI"
    }
}
/**
 * Additional information about the route.
 * @export
 * @interface AirlineTravelRoute
 */
export interface AirlineTravelRoute {
    /**
     * Date of departure.
     * @type {string}
     * @memberof AirlineTravelRoute
     */
    departureDate?: string;
    /**
     * The IATA code for the departure airport.
     * @type {string}
     * @memberof AirlineTravelRoute
     */
    origin?: string;
    /**
     * The IATA code for the destination. airport.
     * @type {string}
     * @memberof AirlineTravelRoute
     */
    destination?: string;
    /**
     * The IATA code for the carrier.
     * @type {string}
     * @memberof AirlineTravelRoute
     */
    carrierCode?: string;
    /**
     * The airline code for the service class of the ticket.
     * @type {string}
     * @memberof AirlineTravelRoute
     */
    serviceClass?: string;
    /**
     * Indicates whether the route is direct.
     * @type {string}
     * @memberof AirlineTravelRoute
     */
    stopoverType?: AirlineTravelRoute.StopoverTypeEnum;
    /**
     * The airline fare basis code.
     * @type {string}
     * @memberof AirlineTravelRoute
     */
    fareBasisCode?: string;
    /**
     * Fee charged by a country when a person leaves the country.
     * @type {number}
     * @memberof AirlineTravelRoute
     */
    departureTax?: number;
    /**
     * The airline flight number associated with the ticket.
     * @type {string}
     * @memberof AirlineTravelRoute
     */
    flightNumber?: string;
}
/**
 * @export
 * @namespace AirlineTravelRoute
 */
export declare namespace AirlineTravelRoute {
    /**
     * @export
     * @enum {string}
     */
    enum StopoverTypeEnum {
        DIRECT = "DIRECT",
        STOPOVER = "STOPOVER"
    }
}
/**
 * The payment object for AliPay transactions. Use this to populate Alipay payment method details.
 * @export
 * @interface AliPay
 */
export interface AliPay {
    /**
     * Use this to indicate the type of machine-readable payment data for scanning.
     * @type {string}
     * @memberof AliPay
     */
    paymentDataType: AliPay.PaymentDataTypeEnum;
    /**
     * Use this to send payment related information, such as customer identity ID.
     * @type {string}
     * @memberof AliPay
     */
    paymentData: string;
    /**
     * Use this to send an order title that shows up in the statement.
     * @type {string}
     * @memberof AliPay
     */
    orderTitle: string;
    /**
     * Use this to send order details that show up in the statement.
     * @type {string}
     * @memberof AliPay
     */
    orderDetails: string;
}
/**
 * @export
 * @namespace AliPay
 */
export declare namespace AliPay {
    /**
     * @export
     * @enum {string}
     */
    enum PaymentDataTypeEnum {
        BARCODE = "BARCODE",
        QRCODE = "QRCODE"
    }
}
/**
 * Payment method containing AliPay information.
 * @export
 * @interface AliPayPaymentMethod
 */
export interface AliPayPaymentMethod extends PaymentMethod {
    /**
     *
     * @type {AliPay}
     * @memberof AliPayPaymentMethod
     */
    aliPay: AliPay;
}
/**
 * Request to create sale transaction using AliPay.
 * @export
 * @interface AliPaySaleTransaction
 */
export interface AliPaySaleTransaction extends PrimaryTransaction {
    /**
     *
     * @type {AliPayPaymentMethod}
     * @memberof AliPaySaleTransaction
     */
    paymentMethod: AliPayPaymentMethod;
}
/**
 * Amount of the transaction.
 * @export
 * @interface Amount
 */
export interface Amount {
    /**
     * Amount total.
     * @type {number}
     * @memberof Amount
     */
    total: number;
    /**
     * ISO 4217 currency code.
     * @type {string}
     * @memberof Amount
     */
    currency: string;
    /**
     *
     * @type {AmountComponents}
     * @memberof Amount
     */
    components?: AmountComponents;
}
/**
 * Transaction amounts with multiple components.
 * @export
 * @interface AmountComponents
 */
export interface AmountComponents {
    /**
     * Subtotal amount.
     * @type {number}
     * @memberof AmountComponents
     */
    subtotal?: number;
    /**
     * Value-added tax amount.
     * @type {number}
     * @memberof AmountComponents
     */
    vatAmount?: number;
    /**
     * Local tax amount.
     * @type {number}
     * @memberof AmountComponents
     */
    localTax?: number;
    /**
     * Shipping amount.
     * @type {number}
     * @memberof AmountComponents
     */
    shipping?: number;
    /**
     * Cashback amount.
     * @type {number}
     * @memberof AmountComponents
     */
    cashback?: number;
    /**
     * Tip amount.
     * @type {number}
     * @memberof AmountComponents
     */
    tip?: number;
}
/**
 * Request authentication of the payment card to verify the cardholder and be eligible for liability shift. Provides shared fields for all Authentication request types. Abstract class, do not use this class directly, use one of its children.
 * @export
 * @interface Authentication
 */
export interface Authentication {
    /**
     * Indicates what kind of authentication scheme the merchant wants to use on the card.
     * @type {string}
     * @memberof Authentication
     */
    requestType: string;
}
/**
 * Authentication redirect details.
 * @export
 * @interface AuthenticationRedirect
 */
export interface AuthenticationRedirect {
    /**
     * The type of authentication.
     * @type {string}
     * @memberof AuthenticationRedirect
     */
    type?: AuthenticationRedirect.TypeEnum;
    /**
     * The URL for the authentication redirect for the merchant.
     * @type {string}
     * @memberof AuthenticationRedirect
     */
    targetUrl?: string;
    /**
     *
     * @type {AuthenticationRedirectParams}
     * @memberof AuthenticationRedirect
     */
    params?: AuthenticationRedirectParams;
}
/**
 * @export
 * @namespace AuthenticationRedirect
 */
export declare namespace AuthenticationRedirect {
    /**
     * @export
     * @enum {string}
     */
    enum TypeEnum {
        SECURE3D = "SECURE_3D"
    }
}
/**
 * Additional paramters for authentication redirect.
 * @export
 * @interface AuthenticationRedirectParams
 */
export interface AuthenticationRedirectParams {
    /**
     * Message sent from merchant server to authenticate the cardholder.
     * @type {string}
     * @memberof AuthenticationRedirectParams
     */
    payerAuthenticationRequest?: string;
    /**
     * Terminal URL for processing request.
     * @type {string}
     * @memberof AuthenticationRedirectParams
     */
    termUrl?: string;
    /**
     * Merchant data.
     * @type {string}
     * @memberof AuthenticationRedirectParams
     */
    merchantData?: string;
}
/**
 * Provides shared fields for all AuthenticationVerificationRequest types. Provides shared fields for all PrimaryTransaction request types. Abstract class, do not use this class directly, use one of its children.
 * @export
 * @interface AuthenticationVerificationRequest
 */
export interface AuthenticationVerificationRequest {
    /**
     * An optional Outlet ID for clients that support multiple stores in the same developer app.
     * @type {string}
     * @memberof AuthenticationVerificationRequest
     */
    storeId?: string;
    /**
     * Object name of the authentication verification request.
     * @type {string}
     * @memberof AuthenticationVerificationRequest
     */
    requestType: string;
    /**
     * Card security code if required by merchant.
     * @type {string}
     * @memberof AuthenticationVerificationRequest
     */
    securityCode?: string;
    /**
     *
     * @type {Address}
     * @memberof AuthenticationVerificationRequest
     */
    billingAddress?: Address;
}
/**
 * Contains apiTraceId and clientRequestId shared in all response types.
 * @export
 * @interface BasicResponse
 */
export interface BasicResponse {
    /**
     * Echoes back the value in the request header for tracking.
     * @type {string}
     * @memberof BasicResponse
     */
    clientRequestId?: string;
    /**
     * Request identifier in API, can be used to request logs from the support team.
     * @type {string}
     * @memberof BasicResponse
     */
    apiTraceId?: string;
    /**
     *
     * @type {ResponseType}
     * @memberof BasicResponse
     */
    responseType?: ResponseType;
}
/**
 * Customer billing information.
 * @export
 * @interface Billing
 */
export interface Billing {
    /**
     * Billing name.
     * @type {string}
     * @memberof Billing
     */
    name?: string;
    /**
     * Customer ID for billing purpose.
     * @type {string}
     * @memberof Billing
     */
    customerId?: string;
    /**
     * Customer birth date.
     * @type {string}
     * @memberof Billing
     */
    birthDate?: string;
    /**
     *
     * @type {Contact}
     * @memberof Billing
     */
    contact?: Contact;
    /**
     *
     * @type {Address}
     * @memberof Billing
     */
    address?: Address;
}
/**
 * Customer address fields associated with billing.
 * @export
 * @interface BillingAddress
 */
export interface BillingAddress {
    /**
     * First name.
     * @type {string}
     * @memberof BillingAddress
     */
    firstName?: string;
    /**
     * Last name.
     * @type {string}
     * @memberof BillingAddress
     */
    lastName?: string;
    /**
     * Middle name.
     * @type {string}
     * @memberof BillingAddress
     */
    middleName?: string;
    /**
     * First line of street address.
     * @type {string}
     * @memberof BillingAddress
     */
    street: string;
    /**
     * Second line of street address.
     * @type {string}
     * @memberof BillingAddress
     */
    street2?: string;
    /**
     * State or province.
     * @type {string}
     * @memberof BillingAddress
     */
    stateProvince?: string;
    /**
     * City.
     * @type {string}
     * @memberof BillingAddress
     */
    city?: string;
    /**
     * Country.
     * @type {string}
     * @memberof BillingAddress
     */
    country?: string;
    /**
     *
     * @type {BillingAddressPhone}
     * @memberof BillingAddress
     */
    phone?: BillingAddressPhone;
    /**
     * Postal code.
     * @type {string}
     * @memberof BillingAddress
     */
    zipPostalCode?: string;
}
/**
 * Phone number.
 * @export
 * @interface BillingAddressPhone
 */
export interface BillingAddressPhone {
    /**
     * Type of phone.
     * @type {string}
     * @memberof BillingAddressPhone
     */
    type?: string;
    /**
     * Free-form phone number.
     * @type {string}
     * @memberof BillingAddressPhone
     */
    number?: string;
}
/**
 * Additional data specific to the car rental industry.
 * @export
 * @interface CarRental
 */
export interface CarRental {
    /**
     * The car rental agreement number.
     * @type {string}
     * @memberof CarRental
     */
    agreementNumber?: string;
    /**
     * The name of the person renting the car.
     * @type {string}
     * @memberof CarRental
     */
    renterName?: string;
    /**
     * The city where the rental ends and the car is returned.
     * @type {string}
     * @memberof CarRental
     */
    returnCity?: string;
    /**
     * The date the car rental ends and the car is returned.
     * @type {string}
     * @memberof CarRental
     */
    returnDate?: string;
    /**
     * The date the car rental begins.
     * @type {string}
     * @memberof CarRental
     */
    pickupDate?: string;
    /**
     * The classification of the rental car.
     * @type {string}
     * @memberof CarRental
     */
    rentalClassId?: string;
    /**
     * Array containing information about charges other than the rental rate.
     * @type {Array<CarRentalExtraCharges>}
     * @memberof CarRental
     */
    extraCharges?: Array<CarRentalExtraCharges>;
    /**
     * Indicates if the transaction is related to a no-show charge.
     * @type {boolean}
     * @memberof CarRental
     */
    noShowIndicator?: boolean;
}
/**
 *
 * @export
 * @interface CarRentalExtraCharges
 */
export interface CarRentalExtraCharges {
    /**
     * Additional charge item.
     * @type {string}
     * @memberof CarRentalExtraCharges
     */
    chargeItem?: CarRentalExtraCharges.ChargeItemEnum;
}
/**
 * @export
 * @namespace CarRentalExtraCharges
 */
export declare namespace CarRentalExtraCharges {
    /**
     * @export
     * @enum {string}
     */
    enum ChargeItemEnum {
        EXTRAMILEAGE = "EXTRA_MILEAGE",
        GAS = "GAS",
        LATERETURN = "LATE_RETURN",
        ONEWAYSERVICEFEE = "ONE_WAY_SERVICE_FEE",
        PARKINGVIOLATION = "PARKING_VIOLATION"
    }
}
/**
 * Properties for the payment method.
 * @export
 * @interface Card
 */
export interface Card {
    /**
     * TransArmor token value. Either the token fields or card number field must contain a value.
     * @type {string}
     * @memberof Card
     */
    taToken?: string;
    /**
     * TransArmor token key to identify the merchant.
     * @type {string}
     * @memberof Card
     */
    taTokenKey?: string;
    /**
     * The cardholder name as it appears on the card.
     * @type {string}
     * @memberof Card
     */
    cardholderName?: string;
    /**
     * Use this field to send clear PAN or tokens other than TransArmor Token.
     * @type {string}
     * @memberof Card
     */
    cardNumber?: string;
    /**
     * Payment method expiration date. Format is MMYYYY.
     * @type {string}
     * @memberof Card
     */
    expDate?: string;
    /**
     * CVV present indicator.
     * @type {string}
     * @memberof Card
     */
    cvv?: string;
    /**
     * The company (usually a bank) that issued the card.
     * @type {string}
     * @memberof Card
     */
    issuer?: string;
    /**
     * A number that distinguishes between two plastic cards with the same card number in the event of the card being re-issued.
     * @type {string}
     * @memberof Card
     */
    cardReissuedNumber?: string;
}
/**
 * Card function. This field is required when performing transactions for Brazil merchants.
 * @export
 * @enum {string}
 */
export declare enum CardFunction {
    CREDIT = "CREDIT",
    DEBIT = "DEBIT",
    PREPAID = "PREPAID",
    VOUCHER = "VOUCHER",
    UNDEFINED = "UNDEFINED"
}
/**
 * Card information.
 * @export
 * @interface CardInfo
 */
export interface CardInfo {
    /**
     * The card brand.
     * @type {string}
     * @memberof CardInfo
     */
    brand?: string;
    /**
     * The product ID of the brand.
     * @type {string}
     * @memberof CardInfo
     */
    brandProductId?: string;
    /**
     *
     * @type {CardFunction}
     * @memberof CardInfo
     */
    cardFunction?: CardFunction;
    /**
     * Indicates whether it is a corporate or non-corporate card.
     * @type {string}
     * @memberof CardInfo
     */
    commercialCard?: CardInfo.CommercialCardEnum;
    /**
     * The country of the issuer.
     * @type {string}
     * @memberof CardInfo
     */
    issuerCountry?: string;
    /**
     * The name of the issuer.
     * @type {string}
     * @memberof CardInfo
     */
    issuerName?: string;
}
/**
 * @export
 * @namespace CardInfo
 */
export declare namespace CardInfo {
    /**
     * @export
     * @enum {string}
     */
    enum CommercialCardEnum {
        CORPORATE = "CORPORATE",
        NONCORPORATE = "NON_CORPORATE"
    }
}
/**
 * Request to look up card-related information such as issuer country, card function and card brand.
 * @export
 * @interface CardInfoLookupRequest
 */
export interface CardInfoLookupRequest {
    /**
     * An optional outlet id for clients that support multiple stores in the same developer app.
     * @type {string}
     * @memberof CardInfoLookupRequest
     */
    storeId?: string;
    /**
     *
     * @type {PaymentCard}
     * @memberof CardInfoLookupRequest
     */
    paymentCard: PaymentCard;
}
/**
 * Response from card info lookup request.
 * @export
 * @interface CardInfoLookupResponse
 */
export interface CardInfoLookupResponse extends BasicResponse {
    /**
     * One or more card information retrieved based on BIN.
     * @type {Array<CardInfo>}
     * @memberof CardInfoLookupResponse
     */
    cardDetails?: Array<CardInfo>;
    /**
     * Request status.
     * @type {string}
     * @memberof CardInfoLookupResponse
     */
    requestStatus?: CardInfoLookupResponse.RequestStatusEnum;
}
/**
 * @export
 * @namespace CardInfoLookupResponse
 */
export declare namespace CardInfoLookupResponse {
    /**
     * @export
     * @enum {string}
     */
    enum RequestStatusEnum {
        SUCCESS = "SUCCESS",
        LISTEMPTY = "LIST_EMPTY"
    }
}
/**
 * Request to verify card validity.
 * @export
 * @interface CardVerificationRequest
 */
export interface CardVerificationRequest {
    /**
     *
     * @type {PaymentCard}
     * @memberof CardVerificationRequest
     */
    paymentCard: PaymentCard;
    /**
     *
     * @type {Address}
     * @memberof CardVerificationRequest
     */
    billingAddress?: Address;
    /**
     * An optional outlet ID for clients that support multiple stores in the same app.
     * @type {string}
     * @memberof CardVerificationRequest
     */
    storeId?: string;
}
/**
 * The payment object for China-domestic transactions. Use this to populate all china domestic payment method details.
 * @export
 * @interface ChinaDomestic
 */
export interface ChinaDomestic {
    /**
     * Use this to indicate the product code according to the product category list.
     * @type {string}
     * @memberof ChinaDomestic
     */
    productCode: string;
    /**
     * The quantity.
     * @type {number}
     * @memberof ChinaDomestic
     */
    productQuantity: number;
    /**
     * Rate amount in 3 decimal 12 bytes total digit.
     * @type {number}
     * @memberof ChinaDomestic
     */
    productPrice: number;
    /**
     * The product description.
     * @type {string}
     * @memberof ChinaDomestic
     */
    productDescription: string;
    /**
     * Use this to indicate the product code according to the product category list.
     * @type {string}
     * @memberof ChinaDomestic
     */
    redirectURL: string;
    /**
     * Use this to limit card functions to debit cards.
     * @type {boolean}
     * @memberof ChinaDomestic
     */
    limitCardFunctionToDebit?: boolean;
    /**
     * Use this to indicate the CUP customer ID if known.
     * @type {string}
     * @memberof ChinaDomestic
     */
    customerId?: string;
    /**
     * Use this to indicate the CUP bank ID if known.
     * @type {string}
     * @memberof ChinaDomestic
     */
    bankId?: string;
}
/**
 * Payment method containing China Domestic information.
 * @export
 * @interface ChinaDomesticPaymentMethod
 */
export interface ChinaDomesticPaymentMethod extends PaymentMethod {
    /**
     *
     * @type {ChinaDomestic}
     * @memberof ChinaDomesticPaymentMethod
     */
    chinaDomestic: ChinaDomestic;
    /**
     *
     * @type {string}
     * @memberof ChinaDomesticPaymentMethod
     */
    brand: ChinaDomesticPaymentMethod.BrandEnum;
}
/**
 * @export
 * @namespace ChinaDomesticPaymentMethod
 */
export declare namespace ChinaDomesticPaymentMethod {
    /**
     * @export
     * @enum {string}
     */
    enum BrandEnum {
        ALIPAYDOMESTIC = "ALIPAY_DOMESTIC",
        CUPDOMESTIC = "CUP_DOMESTIC",
        WECHATDOMESTIC = "WECHAT_DOMESTIC"
    }
}
/**
 * Request to create sale transaction using China PnR.
 * @export
 * @interface ChinaPnRSaleTransaction
 */
export interface ChinaPnRSaleTransaction extends PrimaryTransaction {
    /**
     *
     * @type {ChinaDomesticPaymentMethod}
     * @memberof ChinaPnRSaleTransaction
     */
    paymentMethod: ChinaDomesticPaymentMethod;
}
/**
 * Country and language of client.
 * @export
 * @interface ClientLocale
 */
export interface ClientLocale {
    /**
     * Language used by client.
     * @type {string}
     * @memberof ClientLocale
     */
    language: string;
    /**
     * Country of the client.
     * @type {string}
     * @memberof ClientLocale
     */
    country: string;
}
/**
 * Customer contact information.
 * @export
 * @interface Contact
 */
export interface Contact {
    /**
     * Primary phone number.
     * @type {string}
     * @memberof Contact
     */
    phone?: string;
    /**
     * Mobile phone number.
     * @type {string}
     * @memberof Contact
     */
    mobilePhone?: string;
    /**
     * Fax number.
     * @type {string}
     * @memberof Contact
     */
    fax?: string;
    /**
     * Email address.
     * @type {string}
     * @memberof Contact
     */
    email?: string;
}
/**
 * Use this model to create a payment token.
 * @export
 * @interface CreatePaymentToken
 */
export interface CreatePaymentToken {
    /**
     * Client-supplied payment token value. Only applicable for DataVault tokenization scheme.
     * @type {string}
     * @memberof CreatePaymentToken
     */
    value?: string;
    /**
     * If the token is reusable.
     * @type {boolean}
     * @memberof CreatePaymentToken
     */
    reusable?: boolean;
    /**
     * Decline duplicate payment info if client token is supplied.
     * @type {boolean}
     * @memberof CreatePaymentToken
     */
    declineDuplicates?: boolean;
}
/**
 * Currency conversion. Abstract class, do not use this class directly, use one of its children: Dcc, DynamicPricing.
 * @export
 * @interface CurrencyConversion
 */
export interface CurrencyConversion {
    /**
     * Type of currency conversion.
     * @type {string}
     * @memberof CurrencyConversion
     */
    conversionType: string;
    /**
     * Inquiry rate id.
     * @type {string}
     * @memberof CurrencyConversion
     */
    inquiryRateId: string;
}
/**
 * Customer model for customers registered at merchant's website.
 * @export
 * @interface Customer
 */
export interface Customer {
    /**
     * Unique ID for the customer, if registered. This field is required if the parent object is present.
     * @type {string}
     * @memberof Customer
     */
    id: string;
    /**
     * The timestamp of the customers registration in the merchants platform. Format is YYYY-MM-DD.
     * @type {string}
     * @memberof Customer
     */
    startDate?: string;
    /**
     * Customer's first name.
     * @type {string}
     * @memberof Customer
     */
    firstName?: string;
    /**
     * Customer's last name.
     * @type {string}
     * @memberof Customer
     */
    lastName?: string;
    /**
     * Customer's middle name.
     * @type {string}
     * @memberof Customer
     */
    middleName?: string;
    /**
     * Customer's email address.
     * @type {string}
     * @memberof Customer
     */
    email?: string;
    /**
     * The unique ID of the current login session. Must be unique for the customer.
     * @type {string}
     * @memberof Customer
     */
    sessionId?: string;
    /**
     * The username of this customer in the merchants system. This field should contain customer-supplied data if available instead of a generated ID. This field can contain the clients email address if it is also used for authentication purposes.
     * @type {string}
     * @memberof Customer
     */
    username?: string;
    /**
     * The customers gender. Do not set this property if the customer does not specify a gender.
     * @type {string}
     * @memberof Customer
     */
    gender?: Customer.GenderEnum;
    /**
     * The customer's year of birth. Format is YYYY.
     * @type {string}
     * @memberof Customer
     */
    dateOfBirth?: string;
    /**
     *
     * @type {CustomerAddress}
     * @memberof Customer
     */
    address?: CustomerAddress;
    /**
     * A JSON object that can carry any additional information about the customer that might be helpful for fraud detection.
     * @type {any}
     * @memberof Customer
     */
    userDefined?: any;
}
/**
 * @export
 * @namespace Customer
 */
export declare namespace Customer {
    /**
     * @export
     * @enum {string}
     */
    enum GenderEnum {
        Male = "male",
        Female = "female",
        Other = "other"
    }
}
/**
 * Customer address fields.
 * @export
 * @interface CustomerAddress
 */
export interface CustomerAddress {
    /**
     * First line of street address.
     * @type {string}
     * @memberof CustomerAddress
     */
    street: string;
    /**
     * Second line of street address.
     * @type {string}
     * @memberof CustomerAddress
     */
    street2?: string;
    /**
     * State or province.
     * @type {string}
     * @memberof CustomerAddress
     */
    stateProvince?: string;
    /**
     * City.
     * @type {string}
     * @memberof CustomerAddress
     */
    city?: string;
    /**
     * Country.
     * @type {string}
     * @memberof CustomerAddress
     */
    country: string;
    /**
     *
     * @type {CustomerAddressPhone}
     * @memberof CustomerAddress
     */
    phone?: CustomerAddressPhone;
    /**
     * Postal code.
     * @type {string}
     * @memberof CustomerAddress
     */
    zipPostalCode: string;
}
/**
 * Phone number.
 * @export
 * @interface CustomerAddressPhone
 */
export interface CustomerAddressPhone {
    /**
     * Type of phone.
     * @type {string}
     * @memberof CustomerAddressPhone
     */
    type?: string;
    /**
     * Free form phone number.
     * @type {string}
     * @memberof CustomerAddressPhone
     */
    number?: string;
}
/**
 * Request to perform a DCC exchange rate inquiry.
 * @export
 * @interface DCCExchangeRateRequest
 */
export interface DCCExchangeRateRequest extends ExchangeRateRequest {
    /**
     * A bank identification number (BIN) of the card to be used for DCC.
     * @type {string}
     * @memberof DCCExchangeRateRequest
     */
    bin: string;
}
/**
 * Request to perform a dynamic pricing exchange rate inquiry.
 * @export
 * @interface Dcc
 */
export interface Dcc extends CurrencyConversion {
    /**
     * Indicates whether customer agrees with rate to be used.
     * @type {boolean}
     * @memberof Dcc
     */
    dccApplied: boolean;
}
/**
 * The device where this transaction originated.
 * @export
 * @interface Device
 */
export interface Device {
    /**
     * Defines the type of this object.
     * @type {string}
     * @memberof Device
     */
    deviceType: Device.DeviceTypeEnum;
    /**
     * The unique ID of the device. Must be unique for the entire system (not just within a specific merchant or industry).
     * @type {string}
     * @memberof Device
     */
    deviceId: string;
    /**
     * Information about the networks associated with the device.
     * @type {Array<DeviceNetworks>}
     * @memberof Device
     */
    networks?: Array<DeviceNetworks>;
    /**
     * The GPS decimal latitude, ranging from (-90.0 to 90.0) where positive numbers indicate locations North of the equator.
     * @type {number}
     * @memberof Device
     */
    latitude?: number;
    /**
     * The GPS decimal longitude, ranging from (-180.0 to 180.0) where positive numbers indicate locations East of the IERS Reference Meridian.
     * @type {number}
     * @memberof Device
     */
    longitude?: number;
    /**
     * The device's International Mobile Equipment Identity (IMEI) as described in IETF RFC7254.
     * @type {string}
     * @memberof Device
     */
    imei?: string;
    /**
     * The device's model name.
     * @type {string}
     * @memberof Device
     */
    model?: string;
    /**
     * The device's manufacturer.
     * @type {string}
     * @memberof Device
     */
    manufacturer?: string;
    /**
     * The timezone offset from UTC to the devices timezone configuration, specified in the format +hh:mm.
     * @type {string}
     * @memberof Device
     */
    timezoneOffset?: string;
    /**
     * A flag indicating that the device has been altered to allow privileged access to users. This flag should only be set to false if a test was performed and the result was negative. Leave unset otherwise.
     * @type {boolean}
     * @memberof Device
     */
    rooted?: boolean;
    /**
     * A flag indicating that malware was detected on the mobile phone. This flag should only be set to false if a test was performed and the result was negative. Leave unset otherwise.
     * @type {boolean}
     * @memberof Device
     */
    malwareDetected?: boolean;
    /**
     * A JSON object that can carry any additional information about the device that might be helpful for fraud detection.
     * @type {any}
     * @memberof Device
     */
    userDefined?: any;
}
/**
 * @export
 * @namespace Device
 */
export declare namespace Device {
    /**
     * @export
     * @enum {string}
     */
    enum DeviceTypeEnum {
        Pos = "device/pos",
        Mobile = "device/mobile"
    }
}
/**
 * Network information.
 * @export
 * @interface DeviceNetworks
 */
export interface DeviceNetworks {
    /**
     * Defines the type of network associated with the device.
     * @type {string}
     * @memberof DeviceNetworks
     */
    networkType: DeviceNetworks.NetworkTypeEnum;
    /**
     * The IPv4 or IPv6 address of the device if the network assigned one.
     * @type {string}
     * @memberof DeviceNetworks
     */
    ip?: string;
    /**
     * The devices primary phone number. This value should be supplied directly without any transformation (e.g. removal of spaces, hyphens or parentheses). If this data is available in segregated fields, it should be concatenated using a blank space (\" \") as a separator.
     * @type {string}
     * @memberof DeviceNetworks
     */
    phoneNumber?: string;
    /**
     * The network carrier name.
     * @type {string}
     * @memberof DeviceNetworks
     */
    carrierName?: string;
    /**
     * The Mobile Country Code (MCC) as described in the ITUs E.212 specification.
     * @type {string}
     * @memberof DeviceNetworks
     */
    mobileCountryCode?: string;
    /**
     * The Mobile Network Code (MNC) as described in the ITUs E.212 specification.
     * @type {string}
     * @memberof DeviceNetworks
     */
    mobileNetworkCode?: string;
    /**
     * The Mobile Subscription Identification Number code (MSIN) as described in the ITUs E.212 specification.
     * @type {string}
     * @memberof DeviceNetworks
     */
    subscriptionIdentificationNumber?: string;
    /**
     * The Location Area Code (LAC) is a 16-bit identifier for a region that is covered by a set of network antennas.
     * @type {string}
     * @memberof DeviceNetworks
     */
    locationAreaCode?: string;
    /**
     * The Cell ID (CID) is identifier for a specific Base Transceiver Station (BTS) within a specific Location Area Code (LAC).
     * @type {string}
     * @memberof DeviceNetworks
     */
    cellId?: string;
    /**
     * An identifier of the network standard used.
     * @type {string}
     * @memberof DeviceNetworks
     */
    standard?: string;
    /**
     * The MAC address of the device that is connected to the Wi-Fi network.
     * @type {string}
     * @memberof DeviceNetworks
     */
    mac?: string;
    /**
     * The Wi-Fi networks Service Set Identifier (SSID).
     * @type {string}
     * @memberof DeviceNetworks
     */
    ssid?: string;
    /**
     * The Wi-Fi networks Basic Service Set Identifier (BSSID).
     * @type {string}
     * @memberof DeviceNetworks
     */
    bssid?: string;
    /**
     * A JSON object that can carry any additional information about the network that might be helpful for fraud detection.
     * @type {any}
     * @memberof DeviceNetworks
     */
    userDefined?: any;
}
/**
 * @export
 * @namespace DeviceNetworks
 */
export declare namespace DeviceNetworks {
    /**
     * @export
     * @enum {string}
     */
    enum NetworkTypeEnum {
        Mobile = "network/mobile",
        Wifi = "network/wifi"
    }
}
/**
 * Document information.
 * @export
 * @interface Document
 */
export interface Document {
    /**
     * Document type.
     * @type {string}
     * @memberof Document
     */
    type: Document.TypeEnum;
    /**
     * Document number.
     * @type {string}
     * @memberof Document
     */
    number: string;
}
/**
 * @export
 * @namespace Document
 */
export declare namespace Document {
    /**
     * @export
     * @enum {string}
     */
    enum TypeEnum {
        NATIONALIDENTITY = "NATIONAL_IDENTITY",
        SINGLETAXIDENTIFICATION = "SINGLE_TAX_IDENTIFICATION",
        SINGLECODEOFLABORIDENTIFICATION = "SINGLE_CODE_OF_LABOR_IDENTIFICATION",
        BOOKENLISTMENT = "BOOK_ENLISTMENT",
        CIVICNOTEBOOK = "CIVIC_NOTEBOOK",
        PASSPORT = "PASSPORT"
    }
}
/**
 * Request to perform a dynamic pricing exchange rate inquiry.
 * @export
 * @interface DynamicPricing
 */
export interface DynamicPricing extends CurrencyConversion {
    /**
     * The currency code to convert for dynamic pricing in ISO 4217 currency code format.
     * @type {string}
     * @memberof DynamicPricing
     */
    foreignCurrency: string;
    /**
     * Foreign amount.
     * @type {string}
     * @memberof DynamicPricing
     */
    foreignAmount: string;
}
/**
 * Request to perform a dynamic pricing exchange rate inquiry.
 * @export
 * @interface DynamicPricingExchangeRateRequest
 */
export interface DynamicPricingExchangeRateRequest extends ExchangeRateRequest {
    /**
     * The currency code to convert for dynamic pricing in either numeric or alphabetic ISO 4217 currency code format.
     * @type {string}
     * @memberof DynamicPricingExchangeRateRequest
     */
    foreignCurrency: string;
}
/**
 *
 * @export
 * @interface ErrorDetails
 */
export interface ErrorDetails {
    /**
     * The property or attribute associated with the error.
     * @type {string}
     * @memberof ErrorDetails
     */
    field?: string;
    /**
     * Information specific to a property or attribute.
     * @type {string}
     * @memberof ErrorDetails
     */
    message?: string;
}
/**
 * Response containing an error object.
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse extends BasicResponse {
    /**
     *
     * @type {Error}
     * @memberof ErrorResponse
     */
    error?: Error;
}
/**
 * Request to perform an exchange rate inquiry. Abstract class, do not use this class directly, use one of its children.
 * @export
 * @interface ExchangeRateRequest
 */
export interface ExchangeRateRequest {
    /**
     * Object name of the exchange rate request.
     * @type {string}
     * @memberof ExchangeRateRequest
     */
    requestType: string;
    /**
     * The original amount of the merchant currency for calculation.
     * @type {number}
     * @memberof ExchangeRateRequest
     */
    baseAmount: number;
    /**
     * An optional outlet ID for clients that support multiple stores in the same app.
     * @type {string}
     * @memberof ExchangeRateRequest
     */
    storeId?: string;
}
/**
 * Exchange rate response.
 * @export
 * @interface ExchangeRateResponse
 */
export interface ExchangeRateResponse extends BasicResponse {
    /**
     * The response transaction ID.
     * @type {string}
     * @memberof ExchangeRateResponse
     */
    ipgTransactionId?: string;
    /**
     * Time of the request.
     * @type {string}
     * @memberof ExchangeRateResponse
     */
    requestTime?: string;
    /**
     * Inquiry rate ID.
     * @type {string}
     * @memberof ExchangeRateResponse
     */
    inquiryRateId?: string;
    /**
     * Foreign currency in alphabetic ISO 4217 currency code format.
     * @type {string}
     * @memberof ExchangeRateResponse
     */
    foreignCurrency?: string;
    /**
     * Foreign amount.
     * @type {string}
     * @memberof ExchangeRateResponse
     */
    foreignAmount?: string;
    /**
     * Exchange rate.
     * @type {string}
     * @memberof ExchangeRateResponse
     */
    exchangeRate?: string;
    /**
     * Dcc offered.
     * @type {string}
     * @memberof ExchangeRateResponse
     */
    dccOffered?: string;
    /**
     * Exchange rate source timestamp.
     * @type {string}
     * @memberof ExchangeRateResponse
     */
    exchangeRateSourceTimestamp?: string;
    /**
     * Expiration timestamp.
     * @type {string}
     * @memberof ExchangeRateResponse
     */
    expirationTimestamp?: string;
    /**
     * Margin rate percentage.
     * @type {string}
     * @memberof ExchangeRateResponse
     */
    marginRatePercentage?: string;
    /**
     * Exchange rate source name.
     * @type {string}
     * @memberof ExchangeRateResponse
     */
    exchangeRateSourceName?: string;
}
/**
 * Required for normal transactions except for payment with 'RECURRING' flags.
 * @export
 * @interface Expiration
 */
export interface Expiration {
    /**
     * Month of the card expiration date.
     * @type {string}
     * @memberof Expiration
     */
    month: string;
    /**
     * Year of the card expiration date.
     * @type {string}
     * @memberof Expiration
     */
    year: string;
}
/**
 * The list of items included in the order.
 * @export
 * @interface FraudOrder
 */
export interface FraudOrder {
    /**
     *
     * @type {FraudOrderShipToAddress}
     * @memberof FraudOrder
     */
    shipToAddress?: FraudOrderShipToAddress;
    /**
     * The list of items included in the order.
     * @type {Array<FraudOrderItems>}
     * @memberof FraudOrder
     */
    items?: Array<FraudOrderItems>;
    /**
     * A JSON object that can carry any additional information about the order that might be helpful for fraud detection.
     * @type {any}
     * @memberof FraudOrder
     */
    userDefined?: any;
}
/**
 * Product details.
 * @export
 * @interface FraudOrderItems
 */
export interface FraudOrderItems {
    /**
     * A unique ID associated with the product. Must be unique within the merchant's system.
     * @type {string}
     * @memberof FraudOrderItems
     */
    id?: string;
    /**
     * A name or short description of the product.
     * @type {string}
     * @memberof FraudOrderItems
     */
    name?: string;
    /**
     * The unit in which the product is sold (e.g. litre, kilogram, etc). Leave empty if the product is sold as a complete unit.
     * @type {string}
     * @memberof FraudOrderItems
     */
    quantity?: string;
    /**
     * The number of units sold. Set to 1 if there is only one unit of the item. Leave empty if the quantity is unknown at the time of the request.
     * @type {number}
     * @memberof FraudOrderItems
     */
    unit?: number;
    /**
     * The price per unit.
     * @type {string}
     * @memberof FraudOrderItems
     */
    unitPrice?: string;
    /**
     * The categories that this product belongs to.
     * @type {string}
     * @memberof FraudOrderItems
     */
    categories?: string;
    /**
     * The URL to the merchant's management system, for reporting and analysis.
     * @type {string}
     * @memberof FraudOrderItems
     */
    detailsUrl?: string;
    /**
     * A JSON object that can carry any additional information about the order that might be helpful for fraud detection.
     * @type {any}
     * @memberof FraudOrderItems
     */
    userDefined?: any;
}
/**
 * The address where the items in this order should be shipped to.
 * @export
 * @interface FraudOrderShipToAddress
 */
export interface FraudOrderShipToAddress {
    /**
     * Free-form phone number associated with the ship-to address.
     * @type {string}
     * @memberof FraudOrderShipToAddress
     */
    phone?: string;
    /**
     * First line of street address.
     * @type {string}
     * @memberof FraudOrderShipToAddress
     */
    address1?: string;
    /**
     * Second line of street address.
     * @type {string}
     * @memberof FraudOrderShipToAddress
     */
    address2?: string;
    /**
     * City.
     * @type {string}
     * @memberof FraudOrderShipToAddress
     */
    city?: string;
    /**
     * State or province.
     * @type {string}
     * @memberof FraudOrderShipToAddress
     */
    state?: string;
    /**
     * Postal Code, free form.
     * @type {string}
     * @memberof FraudOrderShipToAddress
     */
    zip?: string;
    /**
     * Country.
     * @type {string}
     * @memberof FraudOrderShipToAddress
     */
    country?: string;
}
/**
 * How often payments are sent.
 * @export
 * @interface Frequency
 */
export interface Frequency {
    /**
     * Rate of frequency.
     * @type {number}
     * @memberof Frequency
     */
    every: number;
    /**
     * Unit which defines the frequency.
     * @type {string}
     * @memberof Frequency
     */
    unit: Frequency.UnitEnum;
}
/**
 * @export
 * @namespace Frequency
 */
export declare namespace Frequency {
    /**
     * @export
     * @enum {string}
     */
    enum UnitEnum {
        DAY = "DAY",
        WEEK = "WEEK",
        MONTH = "MONTH",
        YEAR = "YEAR"
    }
}
/**
 * Industry-specific information.
 * @export
 * @interface IndustrySpecificExtensions
 */
export interface IndustrySpecificExtensions {
    /**
     *
     * @type {Airline}
     * @memberof IndustrySpecificExtensions
     */
    airline?: Airline;
    /**
     *
     * @type {Lodging}
     * @memberof IndustrySpecificExtensions
     */
    lodging?: Lodging;
    /**
     *
     * @type {CarRental}
     * @memberof IndustrySpecificExtensions
     */
    carRental?: CarRental;
}
/**
 * Indicates that the total sum payable is divided for payment at successive fixed times.
 * @export
 * @interface InstallmentOptions
 */
export interface InstallmentOptions {
    /**
     * Number of installments for a sale transaction if the customer pays the total amount in multiple transactions.
     * @type {number}
     * @memberof InstallmentOptions
     */
    numberOfInstallments?: number;
    /**
     * Indicates whether the installment interest amount has been applied.
     * @type {boolean}
     * @memberof InstallmentOptions
     */
    installmentsInterest?: boolean;
    /**
     * The number of months the first installment payment will be delayed.
     * @type {number}
     * @memberof InstallmentOptions
     */
    installmentDelayMonths?: number;
    /**
     * The type of recurring payment.
     * @type {string}
     * @memberof InstallmentOptions
     */
    recurringType?: InstallmentOptions.RecurringTypeEnum;
    /**
     * Indicates if the merchant supports merchant advice code (MAC) in order to receive table 55 code for a declined recurring transaction.
     * @type {boolean}
     * @memberof InstallmentOptions
     */
    merchantAdviceCodeSupported?: boolean;
}
/**
 * @export
 * @namespace InstallmentOptions
 */
export declare namespace InstallmentOptions {
    /**
     * @export
     * @enum {string}
     */
    enum RecurringTypeEnum {
        FIRST = "FIRST",
        REPEAT = "REPEAT",
        STANDINGINSTRUCTION = "STANDING_INSTRUCTION"
    }
}
/**
 * Additional data specific to the lodging/hotel industry.
 * @export
 * @interface Lodging
 */
export interface Lodging {
    /**
     * Date of arrival.
     * @type {string}
     * @memberof Lodging
     */
    arrivalDate?: string;
    /**
     * Date of departure.
     * @type {string}
     * @memberof Lodging
     */
    departureDate?: string;
    /**
     * Portfolio number.
     * @type {string}
     * @memberof Lodging
     */
    folioNumber?: string;
    /**
     * Information about charges other than base lodging.
     * @type {Array<LodgingExtraCharges>}
     * @memberof Lodging
     */
    extraCharges?: Array<LodgingExtraCharges>;
    /**
     * Indicates if the transaction is associated with a delayed or no-show penalty.
     * @type {boolean}
     * @memberof Lodging
     */
    noShowIndicator?: boolean;
}
/**
 *
 * @export
 * @interface LodgingExtraCharges
 */
export interface LodgingExtraCharges {
    /**
     *
     * @type {string}
     * @memberof LodgingExtraCharges
     */
    chargeItem?: LodgingExtraCharges.ChargeItemEnum;
}
/**
 * @export
 * @namespace LodgingExtraCharges
 */
export declare namespace LodgingExtraCharges {
    /**
     * @export
     * @enum {string}
     */
    enum ChargeItemEnum {
        GIFTSHOP = "GIFT_SHOP",
        LAUNDRY = "LAUNDRY",
        MINIBAR = "MINI_BAR",
        RESTAURANT = "RESTAURANT",
        TELEPHONE = "TELEPHONE",
        OTHER = "OTHER"
    }
}
/**
 * The loyalty program information associated with this payment.
 * @export
 * @interface Loyalty
 */
export interface Loyalty {
    /**
     * A unique ID associated with the loyalty program account. Must be unique within the merchants system. Depending on loyalty programs the account might also serve as a credit/bank account. If this is the case the ID must be not be the PAN.
     * @type {string}
     * @memberof Loyalty
     */
    id?: string;
    /**
     * A string that identifies the program in which the customer is enrolled if the merchant supports several programs or levels.
     * @type {string}
     * @memberof Loyalty
     */
    program?: string;
    /**
     * The balance of the loyalty program account in a program specific currency (e.g. points).
     * @type {number}
     * @memberof Loyalty
     */
    balance?: number;
}
/**
 * The merchant where this transaction occurred.
 * @export
 * @interface Merchant
 */
export interface Merchant {
    /**
     * The 4-digit Merchant Category Code. The merchant might be associated with multiple MCCs. In that case the MCC provided here will be the one that better describes the current transaction.
     * @type {string}
     * @memberof Merchant
     */
    mcc?: string;
    /**
     * The unique ID of this merchant. Must be unique for the entire system (not just within a specific industry).
     * @type {string}
     * @memberof Merchant
     */
    merchantUniqueId: string;
    /**
     *
     * @type {MerchantLocation}
     * @memberof Merchant
     */
    location?: MerchantLocation;
    /**
     * A JSON object that can carry any additional information about the merchant that might be helpful for fraud detection.
     * @type {any}
     * @memberof Merchant
     */
    userDefined?: any;
}
/**
 * The specific location (e.g. store or station) where the transaction takes place.
 * @export
 * @interface MerchantLocation
 */
export interface MerchantLocation {
    /**
     * The unique ID of this location.
     * @type {string}
     * @memberof MerchantLocation
     */
    locationId?: string;
    /**
     *
     * @type {MerchantLocationMerchantAddress}
     * @memberof MerchantLocation
     */
    merchantAddress?: MerchantLocationMerchantAddress;
    /**
     * Free-text field to describe a hierarchy the merchant would like to provide.
     * @type {string}
     * @memberof MerchantLocation
     */
    hierarchy?: string;
    /**
     * The timezone offset from UTC to the merchants timezone configuration, specified in the format +hh:mm.
     * @type {string}
     * @memberof MerchantLocation
     */
    timezoneOffset?: string;
    /**
     * A JSON object that can carry any additional information about the location that might be helpful for fraud detection.
     * @type {any}
     * @memberof MerchantLocation
     */
    userDefined?: any;
}
/**
 * Info for the merchant address.
 * @export
 * @interface MerchantLocationMerchantAddress
 */
export interface MerchantLocationMerchantAddress {
    /**
     * First line of street address.
     * @type {string}
     * @memberof MerchantLocationMerchantAddress
     */
    street: string;
    /**
     * Second line of street address.
     * @type {string}
     * @memberof MerchantLocationMerchantAddress
     */
    street2?: string;
    /**
     * Merchant state or provinceu.
     * @type {string}
     * @memberof MerchantLocationMerchantAddress
     */
    stateProvince?: string;
    /**
     * Merchant city.
     * @type {string}
     * @memberof MerchantLocationMerchantAddress
     */
    city?: string;
    /**
     * Merchant country.
     * @type {string}
     * @memberof MerchantLocationMerchantAddress
     */
    country: string;
    /**
     * Merchant ZIP code.
     * @type {string}
     * @memberof MerchantLocationMerchantAddress
     */
    zipPostalCode: string;
}
/**
 * Error information.
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * Uniquely identifies an error condition. Client applications need to read and handle errors based on this.
     * @type {string}
     * @memberof ModelError
     */
    code?: string;
    /**
     * A generic description of the error condition.
     * @type {string}
     * @memberof ModelError
     */
    message?: string;
    /**
     * Detailed information about message format errors.
     * @type {Array<ErrorDetails>}
     * @memberof ModelError
     */
    details?: Array<ErrorDetails>;
}
/**
 * Use this model to provide order related details.
 * @export
 * @interface Order
 */
export interface Order {
    /**
     * Client Order ID if supplied by client.
     * @type {string}
     * @memberof Order
     */
    orderId?: string;
    /**
     *
     * @type {Billing}
     * @memberof Order
     */
    billing?: Billing;
    /**
     *
     * @type {Shipping}
     * @memberof Order
     */
    shipping?: Shipping;
    /**
     *
     * @type {IndustrySpecificExtensions}
     * @memberof Order
     */
    industrySpecificExtensions?: IndustrySpecificExtensions;
    /**
     *
     * @type {PurchaseCards}
     * @memberof Order
     */
    purchaseCard?: PurchaseCards;
    /**
     *
     * @type {InstallmentOptions}
     * @memberof Order
     */
    installmentOptions?: InstallmentOptions;
    /**
     *
     * @type {SoftDescriptor}
     * @memberof Order
     */
    softDescriptor?: SoftDescriptor;
    /**
     *
     * @type {AdditionalDetails}
     * @memberof Order
     */
    additionalDetails?: AdditionalDetails;
}
/**
 * Order response with error field included.
 * @export
 * @interface OrderErrorResponse
 */
export interface OrderErrorResponse extends OrderResponse {
    /**
     *
     * @type {Error}
     * @memberof OrderErrorResponse
     */
    error?: Error;
}
/**
 * Common object for primary and secondary payment request responses.
 * @export
 * @interface OrderResponse
 */
export interface OrderResponse extends BasicResponse {
    /**
     * Client order ID if supplied by client, otherwise the order ID.
     * @type {string}
     * @memberof OrderResponse
     */
    orderId?: string;
    /**
     * The transaction time in seconds since epoch.
     * @type {number}
     * @memberof OrderResponse
     */
    transactionTime?: number;
    /**
     *
     * @type {Billing}
     * @memberof OrderResponse
     */
    billing?: Billing;
    /**
     *
     * @type {Shipping}
     * @memberof OrderResponse
     */
    shipping?: Shipping;
    /**
     *
     * @type {SepaMandate}
     * @memberof OrderResponse
     */
    mandate?: SepaMandate;
    /**
     * Required for some payment methods (for example, Klarna).
     * @type {Array<Transaction>}
     * @memberof OrderResponse
     */
    transactions?: Array<Transaction>;
    /**
     *
     * @type {ProcessorData}
     * @memberof OrderResponse
     */
    processor?: ProcessorData;
}
/**
 * The payment object for PayPal transactions.
 * @export
 * @interface PayPal
 */
export interface PayPal {
    /**
     * Email address of the recipient.
     * @type {string}
     * @memberof PayPal
     */
    recipientEmail: string;
}
/**
 * Payment method containing PayPal information.
 * @export
 * @interface PayPalPaymentMethod
 */
export interface PayPalPaymentMethod extends PaymentMethod {
    /**
     *
     * @type {PayPal}
     * @memberof PayPalPaymentMethod
     */
    payPal: PayPal;
}
/**
 * Payment information for the transaction.
 * @export
 * @interface Payment
 */
export interface Payment {
    /**
     * Defines the type of the payment.
     * @type {string}
     * @memberof Payment
     */
    paymentType: Payment.PaymentTypeEnum;
    /**
     *
     * @type {PaymentPayMethod}
     * @memberof Payment
     */
    payMethod: PaymentPayMethod;
    /**
     * Indicates if the cards Personal Identification Number was supplied.
     * @type {boolean}
     * @memberof Payment
     */
    pinPresent: boolean;
    /**
     * The method in which the card information entered the system.
     * @type {string}
     * @memberof Payment
     */
    entryMethod: Payment.EntryMethodEnum;
    /**
     *
     * @type {PaymentIssuerResponse}
     * @memberof Payment
     */
    issuerResponse?: PaymentIssuerResponse;
    /**
     * The actual approved amount. This field should be filled in when the message has already passed through the issuer (e.g. post-authorization). For transaction/authorization this amount refers to the amount that was locked on the card-holders account.
     * @type {string}
     * @memberof Payment
     */
    issuerApprovedAmount?: string;
    /**
     * The payment methods account balance if available. This field should be filled in when the message has already passed through the issuer (e.g. post-authorization).
     * @type {string}
     * @memberof Payment
     */
    issuerCardBalance?: string;
    /**
     *
     * @type {PaymentVerificationAvs}
     * @memberof Payment
     */
    verificationAvs?: PaymentVerificationAvs;
    /**
     *
     * @type {PaymentVerification3ds}
     * @memberof Payment
     */
    verification3ds?: PaymentVerification3ds;
    /**
     *
     * @type {PaymentVerificationCvv}
     * @memberof Payment
     */
    verificationCvv?: PaymentVerificationCvv;
    /**
     * A JSON object that carries any additional information that might be helpful for fraud detection.
     * @type {any}
     * @memberof Payment
     */
    userDefined?: any;
}
/**
 * @export
 * @namespace Payment
 */
export declare namespace Payment {
    /**
     * @export
     * @enum {string}
     */
    enum PaymentTypeEnum {
        Card = "payment/card",
        Wallet = "payment/wallet"
    }
    /**
     * @export
     * @enum {string}
     */
    enum EntryMethodEnum {
        Manual = "manual",
        Stripe = "stripe",
        Ocr = "ocr",
        Emv = "emv",
        Nfc = "nfc",
        Remote = "remote",
        PinPresent = "pinPresent"
    }
}
/**
 * Payment card model.
 * @export
 * @interface PaymentCard
 */
export interface PaymentCard {
    /**
     * Payment card number.
     * @type {string}
     * @memberof PaymentCard
     */
    number: string;
    /**
     *
     * @type {Expiration}
     * @memberof PaymentCard
     */
    expiryDate?: Expiration;
    /**
     * Card verification value/number.
     * @type {string}
     * @memberof PaymentCard
     */
    securityCode?: string;
    /**
     *
     * @type {CardFunction}
     * @memberof PaymentCard
     */
    cardFunction?: CardFunction;
    /**
     * Name of the cardholder.
     * @type {string}
     * @memberof PaymentCard
     */
    cardholderName?: string;
    /**
     *
     * @type {Authentication}
     * @memberof PaymentCard
     */
    authentication?: Authentication;
    /**
     * The payment card BIN.
     * @type {string}
     * @memberof PaymentCard
     */
    bin?: string;
    /**
     * The last 4 numbers of a payment card.
     * @type {string}
     * @memberof PaymentCard
     */
    last4?: string;
    /**
     * Required only if using dual branded card.
     * @type {string}
     * @memberof PaymentCard
     */
    brand?: string;
}
/**
 * Request to create credit transaction using payment card.
 * @export
 * @interface PaymentCardCreditTransaction
 */
export interface PaymentCardCreditTransaction extends PrimaryTransaction {
    /**
     *
     * @type {PaymentCardPaymentMethod}
     * @memberof PaymentCardCreditTransaction
     */
    paymentMethod: PaymentCardPaymentMethod;
    /**
     *
     * @type {CurrencyConversion}
     * @memberof PaymentCardCreditTransaction
     */
    currencyConversion?: CurrencyConversion;
}
/**
 * Request to create forced ticket primary transaction.
 * @export
 * @interface PaymentCardForcedTicketTransaction
 */
export interface PaymentCardForcedTicketTransaction extends PrimaryTransaction {
    /**
     *
     * @type {PaymentCardPaymentMethod}
     * @memberof PaymentCardForcedTicketTransaction
     */
    paymentMethod: PaymentCardPaymentMethod;
    /**
     * Stores the six-digit reference number you have received as the result of a successful external authorization (e.g. by phone). The gateway needs this number for uniquely mapping a ForcedTicket transaction to a previously performed external authorization.
     * @type {string}
     * @memberof PaymentCardForcedTicketTransaction
     */
    referenceNumber: string;
}
/**
 * Request to create payer auth primary transaction.
 * @export
 * @interface PaymentCardPayerAuthTransaction
 */
export interface PaymentCardPayerAuthTransaction extends PrimaryTransaction {
    /**
     *
     * @type {PaymentCardPaymentMethod}
     * @memberof PaymentCardPayerAuthTransaction
     */
    paymentMethod: PaymentCardPaymentMethod;
    /**
     *
     * @type {CurrencyConversion}
     * @memberof PaymentCardPayerAuthTransaction
     */
    currencyConversion?: CurrencyConversion;
}
/**
 * Payment method containing payment card information.
 * @export
 * @interface PaymentCardPaymentMethod
 */
export interface PaymentCardPaymentMethod extends PaymentMethod {
    /**
     *
     * @type {PaymentCard}
     * @memberof PaymentCardPaymentMethod
     */
    paymentCard: PaymentCard;
    /**
     *
     * @type {PaymentFacilitator}
     * @memberof PaymentCardPaymentMethod
     */
    paymentFacilitator?: PaymentFacilitator;
}
/**
 * Used to generate payment tokens during payment.
 * @export
 * @interface PaymentCardPaymentTokenizationRequest
 */
export interface PaymentCardPaymentTokenizationRequest extends PaymentTokenizationRequest {
    /**
     *
     * @type {PaymentCard}
     * @memberof PaymentCardPaymentTokenizationRequest
     */
    paymentCard: PaymentCard;
}
/**
 * Request to create pre-auth transaction using credit card.
 * @export
 * @interface PaymentCardPreAuthTransaction
 */
export interface PaymentCardPreAuthTransaction extends PrimaryTransaction {
    /**
     *
     * @type {PaymentCardPaymentMethod}
     * @memberof PaymentCardPreAuthTransaction
     */
    paymentMethod: PaymentCardPaymentMethod;
    /**
     *
     * @type {StoredCredential}
     * @memberof PaymentCardPreAuthTransaction
     */
    storedCredentials?: StoredCredential;
    /**
     *
     * @type {CreatePaymentToken}
     * @memberof PaymentCardPreAuthTransaction
     */
    createToken?: CreatePaymentToken;
    /**
     *
     * @type {SplitShipment}
     * @memberof PaymentCardPreAuthTransaction
     */
    splitShipment?: SplitShipment;
    /**
     * Settle with multiple sub-merchants, sale and preAuth only.
     * @type {Array<SubMerchantSplit>}
     * @memberof PaymentCardPreAuthTransaction
     */
    settlementSplit?: Array<SubMerchantSplit>;
}
/**
 * Request to create sale transaction using payment card.
 * @export
 * @interface PaymentCardSaleTransaction
 */
export interface PaymentCardSaleTransaction extends PrimaryTransaction {
    /**
     *
     * @type {PaymentCardPaymentMethod}
     * @memberof PaymentCardSaleTransaction
     */
    paymentMethod: PaymentCardPaymentMethod;
    /**
     *
     * @type {StoredCredential}
     * @memberof PaymentCardSaleTransaction
     */
    storedCredentials?: StoredCredential;
    /**
     * Settle with multiple sub-merchants, sale and preAuth only.
     * @type {Array<SubMerchantSplit>}
     * @memberof PaymentCardSaleTransaction
     */
    settlementSplit?: Array<SubMerchantSplit>;
    /**
     *
     * @type {CreatePaymentToken}
     * @memberof PaymentCardSaleTransaction
     */
    createToken?: CreatePaymentToken;
    /**
     *
     * @type {CurrencyConversion}
     * @memberof PaymentCardSaleTransaction
     */
    currencyConversion?: CurrencyConversion;
}
/**
 * Payment facilitator details provided by the merchant.
 * @export
 * @interface PaymentFacilitator
 */
export interface PaymentFacilitator {
    /**
     * External merchant ID of the payment facilitator.
     * @type {string}
     * @memberof PaymentFacilitator
     */
    externalMerchantId: string;
    /**
     * Payment facilitator ID supplied during boarding.
     * @type {string}
     * @memberof PaymentFacilitator
     */
    paymentFacilitatorId: string;
    /**
     * Independent sales organization (ISO) ID provided by Mastercard.
     * @type {string}
     * @memberof PaymentFacilitator
     */
    saleOrganizationId?: string;
    /**
     * Payment facilitator name.
     * @type {string}
     * @memberof PaymentFacilitator
     */
    name: string;
    /**
     *
     * @type {SubMerchantData}
     * @memberof PaymentFacilitator
     */
    subMerchantData?: SubMerchantData;
}
/**
 * The issuers response to the payment request. This field should be filled in when the message has already passed through the issuer (e.g. post-authorization).
 * @export
 * @interface PaymentIssuerResponse
 */
export interface PaymentIssuerResponse {
    /**
     * The verification response code, as sent by the verification system.
     * @type {string}
     * @memberof PaymentIssuerResponse
     */
    code: string;
    /**
     * The interpretation of the response code. Valid values are \"approved\" - The verification was conducted and is approved. \"declined\" - The verification was conducted and is not approved. \"disabled\" - The verification was not conducted because it was not requested or disabled in the verification. \"unknown\" - The verification was attempted but it failed due to some system error (e.g. timeout).
     * @type {string}
     * @memberof PaymentIssuerResponse
     */
    status?: PaymentIssuerResponse.StatusEnum;
    /**
     * An identifier of the system/specification from which the code was received, and how the status was derived.
     * @type {string}
     * @memberof PaymentIssuerResponse
     */
    scheme: string;
}
/**
 * @export
 * @namespace PaymentIssuerResponse
 */
export declare namespace PaymentIssuerResponse {
    /**
     * @export
     * @enum {string}
     */
    enum StatusEnum {
        Approved = "approved",
        Declined = "declined",
        Disabled = "disabled",
        Unknown = "unknown"
    }
}
/**
 * Various payment methods the Gateway supports. Abstract class, do not use this class directly, use one of its children.
 * @export
 * @interface PaymentMethod
 */
export interface PaymentMethod {
}
/**
 * Provides details of the payment method used.
 * @export
 * @interface PaymentMethodDetails
 */
export interface PaymentMethodDetails {
    /**
     *
     * @type {PaymentCard}
     * @memberof PaymentMethodDetails
     */
    paymentCard?: PaymentCard;
    /**
     *
     * @type {PaymentMethodType}
     * @memberof PaymentMethodDetails
     */
    paymentMethodType?: PaymentMethodType;
}
/**
 * Request to create a new payment schedule using a payment method.
 * @export
 * @interface PaymentMethodPaymentSchedulesRequest
 */
export interface PaymentMethodPaymentSchedulesRequest extends PaymentSchedulesRequest {
    /**
     *
     * @type {PaymentCardPaymentMethod}
     * @memberof PaymentMethodPaymentSchedulesRequest
     */
    paymentMethod: PaymentCardPaymentMethod;
}
/**
 * Type of payment method.
 * @export
 * @enum {string}
 */
export declare enum PaymentMethodType {
    ALIPAY = "ALIPAY",
    ALIPAYPAYSECUREUS = "ALIPAY_PAYSECURE_US",
    ALIPAYDOMESTIC = "ALIPAY_DOMESTIC",
    APM = "APM",
    CUPDOMESTIC = "CUP_DOMESTIC",
    DEBITDE = "DEBITDE",
    EMI = "EMI",
    GIROPAY = "GIROPAY",
    IDEAL = "IDEAL",
    INDIAWALLET = "INDIAWALLET",
    KLARNA = "KLARNA",
    NETBANKING = "NETBANKING",
    PAYMENTCARD = "PAYMENT_CARD",
    PAYMENTTOKEN = "PAYMENT_TOKEN",
    PAYPAL = "PAYPAL",
    SEPA = "SEPA",
    SOFORT = "SOFORT",
    WALLET = "WALLET",
    WECHATDOMESTIC = "WECHAT_DOMESTIC"
}
/**
 * Info about the payment method.
 * @export
 * @interface PaymentPayMethod
 */
export interface PaymentPayMethod {
    /**
     * Unique ID for the payment method type.
     * @type {string}
     * @memberof PaymentPayMethod
     */
    methodType: PaymentPayMethod.MethodTypeEnum;
    /**
     * The unique ID of this payment method if it was previously registered with a registration/method or if it is currently being registered. Must be unique for the entire system (not just within a specific merchant or industry). Mandatory if being used inside a registration/method.
     * @type {string}
     * @memberof PaymentPayMethod
     */
    methodId?: string;
    /**
     * The address that should be used to send billing information for this payment method.
     * @type {string}
     * @memberof PaymentPayMethod
     */
    methodAlias?: string;
    /**
     *
     * @type {Card}
     * @memberof PaymentPayMethod
     */
    card: Card;
    /**
     * The wallet provider. This field should be normalized before sending through the API.
     * @type {string}
     * @memberof PaymentPayMethod
     */
    provider?: string;
    /**
     * A JSON object that can carry any additional information about the method that might be helpful for fraud detection.
     * @type {any}
     * @memberof PaymentPayMethod
     */
    userDefined?: any;
}
/**
 * @export
 * @namespace PaymentPayMethod
 */
export declare namespace PaymentPayMethod {
    /**
     * @export
     * @enum {string}
     */
    enum MethodTypeEnum {
        Card = "method/card",
        Wallet = "method/wallet"
    }
}
/**
 * Payment schedules response with error field included.
 * @export
 * @interface PaymentSchedulesErrorResponse
 */
export interface PaymentSchedulesErrorResponse extends PaymentSchedulesResponse {
    /**
     *
     * @type {Error}
     * @memberof PaymentSchedulesErrorResponse
     */
    error?: Error;
}
/**
 * @export
 * @namespace PaymentSchedulesErrorResponse
 */
export declare namespace PaymentSchedulesErrorResponse {
}
/**
 * Request to create a gateway schedule. Abstract class, do not use this class directly, use one of its children.
 * @export
 * @interface PaymentSchedulesRequest
 */
export interface PaymentSchedulesRequest {
    /**
     * Object name of the payment schedules request.
     * @type {string}
     * @memberof PaymentSchedulesRequest
     */
    requestType: string;
    /**
     * Store ID number.
     * @type {string}
     * @memberof PaymentSchedulesRequest
     */
    storeId?: string;
    /**
     * Date of mandate signature.
     * @type {string}
     * @memberof PaymentSchedulesRequest
     */
    startDate: string;
    /**
     * Number of times the recurring payment will process.
     * @type {number}
     * @memberof PaymentSchedulesRequest
     */
    numberOfPayments?: number;
    /**
     * Number of failures that can be encountered before re-tries cease.
     * @type {number}
     * @memberof PaymentSchedulesRequest
     */
    maximumFailures?: number;
    /**
     * Invoice number.
     * @type {string}
     * @memberof PaymentSchedulesRequest
     */
    invoiceNumber?: string;
    /**
     * Purchase order number.
     * @type {string}
     * @memberof PaymentSchedulesRequest
     */
    purchaseOrderNumber?: string;
    /**
     *
     * @type {TransactionOrigin}
     * @memberof PaymentSchedulesRequest
     */
    transactionOrigin?: TransactionOrigin;
    /**
     * Dynamic merchant name for the cardholder's statement.
     * @type {string}
     * @memberof PaymentSchedulesRequest
     */
    dynamicMerchantName?: string;
    /**
     *
     * @type {Frequency}
     * @memberof PaymentSchedulesRequest
     */
    frequency: Frequency;
    /**
     *
     * @type {Amount}
     * @memberof PaymentSchedulesRequest
     */
    transactionAmount: Amount;
    /**
     *
     * @type {ClientLocale}
     * @memberof PaymentSchedulesRequest
     */
    clientLocale?: ClientLocale;
    /**
     * Client order ID if supplied by client.
     * @type {string}
     * @memberof PaymentSchedulesRequest
     */
    orderId?: string;
    /**
     *
     * @type {Billing}
     * @memberof PaymentSchedulesRequest
     */
    billing?: Billing;
    /**
     *
     * @type {Shipping}
     * @memberof PaymentSchedulesRequest
     */
    shipping?: Shipping;
    /**
     * User supplied comments.
     * @type {string}
     * @memberof PaymentSchedulesRequest
     */
    comments?: string;
}
/**
 * Response from the gateway scheduler creation call.
 * @export
 * @interface PaymentSchedulesResponse
 */
export interface PaymentSchedulesResponse extends BasicResponse {
    /**
     * Result of requested operation. If it's anything other than 'SUCCESS', please refer to 400s HTTP error codes or decline. See Error object for details.
     * @type {string}
     * @memberof PaymentSchedulesResponse
     */
    requestStatus?: PaymentSchedulesResponse.RequestStatusEnum;
    /**
     * Client order ID if supplied by client, otherwise the order ID.
     * @type {string}
     * @memberof PaymentSchedulesResponse
     */
    orderId?: string;
    /**
     *
     * @type {TransactionResponse}
     * @memberof PaymentSchedulesResponse
     */
    transactionResponse?: TransactionResponse;
}
/**
 * @export
 * @namespace PaymentSchedulesResponse
 */
export declare namespace PaymentSchedulesResponse {
    /**
     * @export
     * @enum {string}
     */
    enum RequestStatusEnum {
        SUCCESS = "SUCCESS",
        VALIDATIONFAILED = "VALIDATION_FAILED",
        PROCESSINGFAILED = "PROCESSING_FAILED",
        FAILURE = "FAILURE",
        DECLINED = "DECLINED"
    }
}
/**
 * Request to create credit transaction using payment token.
 * @export
 * @interface PaymentTokenCreditTransaction
 */
export interface PaymentTokenCreditTransaction extends PrimaryTransaction {
    /**
     *
     * @type {PaymentTokenPaymentMethod}
     * @memberof PaymentTokenCreditTransaction
     */
    paymentMethod: PaymentTokenPaymentMethod;
    /**
     *
     * @type {CurrencyConversion}
     * @memberof PaymentTokenCreditTransaction
     */
    currencyConversion?: CurrencyConversion;
}
/**
 * Response details for payment token creation.
 * @export
 * @interface PaymentTokenDetails
 */
export interface PaymentTokenDetails extends CreatePaymentToken {
    /**
     * The last 4 numbers of a payment card.
     * @type {string}
     * @memberof PaymentTokenDetails
     */
    last4?: string;
    /**
     * Card brand, only for tokenization with payment.
     * @type {string}
     * @memberof PaymentTokenDetails
     */
    brand?: string;
    /**
     * If the account the token was created from has been verified.
     * @type {boolean}
     * @memberof PaymentTokenDetails
     */
    accountVerification?: boolean;
    /**
     * Inidcates the type of tokenization source.
     * @type {string}
     * @memberof PaymentTokenDetails
     */
    type?: string;
}
/**
 * Payment method containing payment tokenization information.
 * @export
 * @interface PaymentTokenPaymentMethod
 */
export interface PaymentTokenPaymentMethod extends PaymentMethod {
    /**
     *
     * @type {UsePaymentToken}
     * @memberof PaymentTokenPaymentMethod
     */
    paymentToken: UsePaymentToken;
    /**
     *
     * @type {PaymentFacilitator}
     * @memberof PaymentTokenPaymentMethod
     */
    paymentFacilitator?: PaymentFacilitator;
}
/**
 * Request to create pre-auth transaction using payment token.
 * @export
 * @interface PaymentTokenPreAuthTransaction
 */
export interface PaymentTokenPreAuthTransaction extends PrimaryTransaction {
    /**
     *
     * @type {PaymentTokenPaymentMethod}
     * @memberof PaymentTokenPreAuthTransaction
     */
    paymentMethod: PaymentTokenPaymentMethod;
    /**
     *
     * @type {StoredCredential}
     * @memberof PaymentTokenPreAuthTransaction
     */
    storedCredentials?: StoredCredential;
    /**
     *
     * @type {SplitShipment}
     * @memberof PaymentTokenPreAuthTransaction
     */
    splitShipment?: SplitShipment;
    /**
     * Settle with multiple sub-merchants, sale and preAuth only.
     * @type {Array<SubMerchantSplit>}
     * @memberof PaymentTokenPreAuthTransaction
     */
    settlementSplit?: Array<SubMerchantSplit>;
}
/**
 * Request to create sale transaction using payment token.
 * @export
 * @interface PaymentTokenSaleTransaction
 */
export interface PaymentTokenSaleTransaction extends PrimaryTransaction {
    /**
     *
     * @type {PaymentTokenPaymentMethod}
     * @memberof PaymentTokenSaleTransaction
     */
    paymentMethod: PaymentTokenPaymentMethod;
    /**
     *
     * @type {StoredCredential}
     * @memberof PaymentTokenSaleTransaction
     */
    storedCredentials?: StoredCredential;
    /**
     * Settle with multiple sub-merchants, sale and preAuth only.
     * @type {Array<SubMerchantSplit>}
     * @memberof PaymentTokenSaleTransaction
     */
    settlementSplit?: Array<SubMerchantSplit>;
    /**
     *
     * @type {CurrencyConversion}
     * @memberof PaymentTokenSaleTransaction
     */
    currencyConversion?: CurrencyConversion;
}
/**
 * Payment tokenization response with error field included.
 * @export
 * @interface PaymentTokenizationErrorResponse
 */
export interface PaymentTokenizationErrorResponse extends PaymentTokenizationResponse {
    /**
     *
     * @type {Error}
     * @memberof PaymentTokenizationErrorResponse
     */
    error?: Error;
}
/**
 * @export
 * @namespace PaymentTokenizationErrorResponse
 */
export declare namespace PaymentTokenizationErrorResponse {
}
/**
 * Used to generate payment tokens. Abstract class, do not use this class directly, use one of its children.
 * @export
 * @interface PaymentTokenizationRequest
 */
export interface PaymentTokenizationRequest {
    /**
     * Object name of tokenization request.
     * @type {string}
     * @memberof PaymentTokenizationRequest
     */
    requestType: string;
    /**
     * An optional outlet ID for clients that support multiple stores in the same app.
     * @type {string}
     * @memberof PaymentTokenizationRequest
     */
    storeId?: string;
    /**
     *
     * @type {Address}
     * @memberof PaymentTokenizationRequest
     */
    billingAddress?: Address;
    /**
     *
     * @type {CreatePaymentToken}
     * @memberof PaymentTokenizationRequest
     */
    createToken: CreatePaymentToken;
    /**
     * If the account should be verified prior to token creation.
     * @type {boolean}
     * @memberof PaymentTokenizationRequest
     */
    accountVerification?: boolean;
}
/**
 *
 * @export
 * @interface PaymentTokenizationResponse
 */
export interface PaymentTokenizationResponse extends BasicResponse {
    /**
     * The status of the request.
     * @type {string}
     * @memberof PaymentTokenizationResponse
     */
    requestStatus?: PaymentTokenizationResponse.RequestStatusEnum;
    /**
     * Time of the request.
     * @type {number}
     * @memberof PaymentTokenizationResponse
     */
    requestTime?: number;
    /**
     *
     * @type {AVSResponse}
     * @memberof PaymentTokenizationResponse
     */
    avsResponse?: AVSResponse;
    /**
     * Security code check response.
     * @type {string}
     * @memberof PaymentTokenizationResponse
     */
    securityCodeResponse?: string;
    /**
     * Card brand.
     * @type {string}
     * @memberof PaymentTokenizationResponse
     */
    brand?: string;
    /**
     * Country of the card issued.
     * @type {string}
     * @memberof PaymentTokenizationResponse
     */
    country?: string;
    /**
     *
     * @type {PaymentTokenDetails}
     * @memberof PaymentTokenizationResponse
     */
    paymentToken?: PaymentTokenDetails;
    /**
     *
     * @type {PaymentCard}
     * @memberof PaymentTokenizationResponse
     */
    paymentCard?: PaymentCard;
}
/**
 * @export
 * @namespace PaymentTokenizationResponse
 */
export declare namespace PaymentTokenizationResponse {
    /**
     * @export
     * @enum {string}
     */
    enum RequestStatusEnum {
        DELETED = "DELETED",
        FAILED = "FAILED",
        SUCCESS = "SUCCESS",
        APPROVED = "APPROVED",
        WAITING = "WAITING",
        VALIDATIONFAILED = "VALIDATION_FAILED",
        DECLINED = "DECLINED"
    }
}
/**
 * Payment URL response with error field included.
 * @export
 * @interface PaymentUrlErrorResponse
 */
export interface PaymentUrlErrorResponse extends PaymentUrlResponse {
    /**
     *
     * @type {Error}
     * @memberof PaymentUrlErrorResponse
     */
    error?: Error;
}
/**
 * @export
 * @namespace PaymentUrlErrorResponse
 */
export declare namespace PaymentUrlErrorResponse {
}
/**
 * Request to generate an embedded payment link.
 * @export
 * @interface PaymentUrlRequest
 */
export interface PaymentUrlRequest {
    /**
     * An optional Outlet ID for clients that support multiple stores in the same developer app.
     * @type {string}
     * @memberof PaymentUrlRequest
     */
    storeId?: string;
    /**
     *
     * @type {ClientLocale}
     * @memberof PaymentUrlRequest
     */
    clientLocale?: ClientLocale;
    /**
     *
     * @type {Amount}
     * @memberof PaymentUrlRequest
     */
    transactionAmount?: Amount;
    /**
     *
     * @type {TransactionType}
     * @memberof PaymentUrlRequest
     */
    transactionType: TransactionType;
    /**
     * Client order ID if supplied by client, otherwise the order ID.
     * @type {string}
     * @memberof PaymentUrlRequest
     */
    orderId?: string;
    /**
     *
     * @type {Billing}
     * @memberof PaymentUrlRequest
     */
    billing?: Billing;
    /**
     *
     * @type {Shipping}
     * @memberof PaymentUrlRequest
     */
    shipping?: Shipping;
    /**
     * URL for notifying merchant of payment result.
     * @type {string}
     * @memberof PaymentUrlRequest
     */
    transactionNotificationURL?: string;
    /**
     * Time until payment URL expires.
     * @type {number}
     * @memberof PaymentUrlRequest
     */
    expiration?: number;
    /**
     * If 3D secure should be applied.
     * @type {boolean}
     * @memberof PaymentUrlRequest
     */
    authenticateTransaction?: boolean;
    /**
     * Dynamic merchant name for the cardholder's statement.
     * @type {string}
     * @memberof PaymentUrlRequest
     */
    dynamicMerchantName?: string;
    /**
     * Invoice number.
     * @type {string}
     * @memberof PaymentUrlRequest
     */
    invoiceNumber?: string;
    /**
     * Purchase order number.
     * @type {string}
     * @memberof PaymentUrlRequest
     */
    purchaseOrderNumber?: string;
    /**
     * IPv4 or IPv6 network address.
     * @type {string}
     * @memberof PaymentUrlRequest
     */
    ip?: string;
}
/**
 * Response from an embedded payment link request.
 * @export
 * @interface PaymentUrlResponse
 */
export interface PaymentUrlResponse extends BasicResponse {
    /**
     * Request status. If it is anything other than 'SUCCESS', please refer to 400s HTTP error codes or decline. See Error object for details.
     * @type {string}
     * @memberof PaymentUrlResponse
     */
    requestStatus?: PaymentUrlResponse.RequestStatusEnum;
    /**
     * Client order ID if supplied by client, otherwise the order ID.
     * @type {string}
     * @memberof PaymentUrlResponse
     */
    orderId?: string;
    /**
     * URL for embedded payment link.
     * @type {string}
     * @memberof PaymentUrlResponse
     */
    paymentUrl?: string;
    /**
     * ID code from the transaction.
     * @type {string}
     * @memberof PaymentUrlResponse
     */
    transactionId?: string;
}
/**
 * @export
 * @namespace PaymentUrlResponse
 */
export declare namespace PaymentUrlResponse {
    /**
     * @export
     * @enum {string}
     */
    enum RequestStatusEnum {
        SUCCESS = "SUCCESS",
        VALIDATIONFAILED = "VALIDATION_FAILED",
        PROCESSINGFAILED = "PROCESSING_FAILED",
        FAILURE = "FAILURE"
    }
}
/**
 * The result of the 3DS (3D Secure) check.
 * @export
 * @interface PaymentVerification3ds
 */
export interface PaymentVerification3ds {
    /**
     * 3DS response code.
     * @type {string}
     * @memberof PaymentVerification3ds
     */
    code: string;
    /**
     * Interpretation of the response code.
     * @type {string}
     * @memberof PaymentVerification3ds
     */
    status?: string;
    /**
     * Identifier of the scheme.
     * @type {string}
     * @memberof PaymentVerification3ds
     */
    scheme: string;
}
/**
 * The result of the AVS (Address Verification System) check.
 * @export
 * @interface PaymentVerificationAvs
 */
export interface PaymentVerificationAvs {
    /**
     * AVS response code.
     * @type {string}
     * @memberof PaymentVerificationAvs
     */
    code: string;
    /**
     * Interpretation of the response code.
     * @type {string}
     * @memberof PaymentVerificationAvs
     */
    status?: string;
    /**
     * Identifier of the scheme.
     * @type {string}
     * @memberof PaymentVerificationAvs
     */
    scheme: string;
}
/**
 * The result of the CVV (Card Verification Value, or Card Security Code) check.
 * @export
 * @interface PaymentVerificationCvv
 */
export interface PaymentVerificationCvv {
    /**
     * CVV response code.
     * @type {string}
     * @memberof PaymentVerificationCvv
     */
    code: string;
    /**
     * Interpretation of the response code.
     * @type {string}
     * @memberof PaymentVerificationCvv
     */
    status?: string;
    /**
     * Identifier of the scheme.
     * @type {string}
     * @memberof PaymentVerificationCvv
     */
    scheme: string;
}
/**
 * Request to create credit transaction using PayPal.
 * @export
 * @interface PaypalCreditTransaction
 */
export interface PaypalCreditTransaction extends PrimaryTransaction {
    /**
     *
     * @type {PayPalPaymentMethod}
     * @memberof PaypalCreditTransaction
     */
    paymentMethod: PayPalPaymentMethod;
}
/**
 * Request to perform post auth transaction.
 * @export
 * @interface PostAuthTransaction
 */
export interface PostAuthTransaction extends SecondaryTransaction {
    /**
     *
     * @type {Amount}
     * @memberof PostAuthTransaction
     */
    transactionAmount: Amount;
    /**
     *
     * @type {TransactionOrigin}
     * @memberof PostAuthTransaction
     */
    transactionOrigin?: TransactionOrigin;
    /**
     *
     * @type {SplitShipment}
     * @memberof PostAuthTransaction
     */
    splitShipment?: SplitShipment;
    /**
     *
     * @type {SoftDescriptor}
     * @memberof PostAuthTransaction
     */
    softDescriptor?: SoftDescriptor;
}
/**
 * Provides shared fields for all PrimaryTransaction request types. Abstract class, do not use this class directly, use one of its children.
 * @export
 * @interface PrimaryTransaction
 */
export interface PrimaryTransaction {
    /**
     * Object name of the primary transaction request.
     * @type {string}
     * @memberof PrimaryTransaction
     */
    requestType: string;
    /**
     * An optional outlet ID for clients that support multiple stores in the same app.
     * @type {string}
     * @memberof PrimaryTransaction
     */
    storeId?: string;
    /**
     * The unique merchant transaction ID from the request header, if supplied.
     * @type {string}
     * @memberof PrimaryTransaction
     */
    merchantTransactionId?: string;
    /**
     *
     * @type {Amount}
     * @memberof PrimaryTransaction
     */
    transactionAmount: Amount;
    /**
     *
     * @type {TransactionOrigin}
     * @memberof PrimaryTransaction
     */
    transactionOrigin?: TransactionOrigin;
    /**
     *
     * @type {Order}
     * @memberof PrimaryTransaction
     */
    order?: Order;
}
/**
 * Model for processor data.
 * @export
 * @interface ProcessorData
 */
export interface ProcessorData {
    /**
     * Reference transaction ID.
     * @type {string}
     * @memberof ProcessorData
     */
    referenceNumber?: string;
    /**
     * Code returned to confirm transaction.
     * @type {string}
     * @memberof ProcessorData
     */
    authorizationCode?: string;
    /**
     * Response code from endpoints.
     * @type {string}
     * @memberof ProcessorData
     */
    responseCode?: string;
    /**
     * Network used for transaction.
     * @type {string}
     * @memberof ProcessorData
     */
    network?: string;
    /**
     * Raw response code from issuer.
     * @type {string}
     * @memberof ProcessorData
     */
    associationResponseCode?: string;
    /**
     * Message returned from endpoints.
     * @type {string}
     * @memberof ProcessorData
     */
    responseMessage?: string;
    /**
     *
     * @type {AVSResponse}
     * @memberof ProcessorData
     */
    avsResponse?: AVSResponse;
    /**
     * Code returned for CVV.
     * @type {string}
     * @memberof ProcessorData
     */
    securityCodeResponse?: ProcessorData.SecurityCodeResponseEnum;
    /**
     * Code to map merchant advice code to ISO specification.
     * @type {string}
     * @memberof ProcessorData
     */
    merchantAdviceCodeIndicator?: string;
}
/**
 * @export
 * @namespace ProcessorData
 */
export declare namespace ProcessorData {
    /**
     * @export
     * @enum {string}
     */
    enum SecurityCodeResponseEnum {
        MATCHED = "MATCHED",
        NOTMATCHED = "NOT_MATCHED",
        NOTPROCESSED = "NOT_PROCESSED",
        NOTPRESENT = "NOT_PRESENT",
        NOTCERTIFIED = "NOT_CERTIFIED"
    }
}
/**
 * Purchase card details.
 * @export
 * @interface PurchaseCards
 */
export interface PurchaseCards {
    /**
     *
     * @type {PurchaseCardsLevel2}
     * @memberof PurchaseCards
     */
    level2?: PurchaseCardsLevel2;
    /**
     *
     * @type {PurchaseCardsLevel3}
     * @memberof PurchaseCards
     */
    level3?: PurchaseCardsLevel3;
}
/**
 * Level 2 data for monitoring and controlling corporate expenditures.
 * @export
 * @interface PurchaseCardsLevel2
 */
export interface PurchaseCardsLevel2 {
    /**
     * Customer code/customer reference ID.
     * @type {string}
     * @memberof PurchaseCardsLevel2
     */
    customerReferenceID?: string;
    /**
     * Purchase identifier/merchant-related data.
     * @type {string}
     * @memberof PurchaseCardsLevel2
     */
    supplierInvoiceNumber?: string;
    /**
     * Merchant VAT registration/single business reference number/merchant tax ID or corporation VAT number.
     * @type {string}
     * @memberof PurchaseCardsLevel2
     */
    supplierVATRegistrationNumber?: string;
    /**
     *
     * @type {AdditionalAmountRate}
     * @memberof PurchaseCardsLevel2
     */
    totalDiscountAmountAndRate?: AdditionalAmountRate;
    /**
     *
     * @type {AdditionalAmountRate}
     * @memberof PurchaseCardsLevel2
     */
    vatShippingAmountAndRate?: AdditionalAmountRate;
}
/**
 * Level 3 data for monitoring and controlling corporate expenditures.
 * @export
 * @interface PurchaseCardsLevel3
 */
export interface PurchaseCardsLevel3 {
    /**
     * Line items.
     * @type {Array<PurchaseCardsLevel3LineItems>}
     * @memberof PurchaseCardsLevel3
     */
    lineItems: Array<PurchaseCardsLevel3LineItems>;
}
/**
 *
 * @export
 * @interface PurchaseCardsLevel3LineItems
 */
export interface PurchaseCardsLevel3LineItems {
    /**
     * The commodity code used to classify the item purchased.
     * @type {string}
     * @memberof PurchaseCardsLevel3LineItems
     */
    commodityCode?: string;
    /**
     * Merchant product identifier/the Universal Product Code (UPC) of the item purchased.
     * @type {string}
     * @memberof PurchaseCardsLevel3LineItems
     */
    productCode?: string;
    /**
     * The description.
     * @type {string}
     * @memberof PurchaseCardsLevel3LineItems
     */
    description?: string;
    /**
     * The quantity.
     * @type {number}
     * @memberof PurchaseCardsLevel3LineItems
     */
    quantity?: number;
    /**
     * The unit of measure.
     * @type {string}
     * @memberof PurchaseCardsLevel3LineItems
     */
    unitMeasure?: string;
    /**
     * Rate amount in 3 decimal 12 bytes total digit.
     * @type {number}
     * @memberof PurchaseCardsLevel3LineItems
     */
    unitPrice?: number;
    /**
     *
     * @type {AdditionalAmountRate}
     * @memberof PurchaseCardsLevel3LineItems
     */
    vatAmountAndRate?: AdditionalAmountRate;
    /**
     *
     * @type {AdditionalAmountRate}
     * @memberof PurchaseCardsLevel3LineItems
     */
    discountAmountAndRate?: AdditionalAmountRate;
    /**
     * Rate amount in 3 decimal 12 bytes total digit.
     * @type {number}
     * @memberof PurchaseCardsLevel3LineItems
     */
    lineItemTotal?: number;
}
/**
 * Details about existing gateway schedule.
 * @export
 * @interface RecurringPaymentDetails
 */
export interface RecurringPaymentDetails {
    /**
     * Store ID number.
     * @type {string}
     * @memberof RecurringPaymentDetails
     */
    storeId?: string;
    /**
     * Purchase order number.
     * @type {string}
     * @memberof RecurringPaymentDetails
     */
    purchaseOrderNumber?: string;
    /**
     * Invoice number.
     * @type {string}
     * @memberof RecurringPaymentDetails
     */
    invoiceNumber?: string;
    /**
     * Date recurring payment was created.
     * @type {string}
     * @memberof RecurringPaymentDetails
     */
    creationDate?: string;
    /**
     * Date of mandate signature.
     * @type {string}
     * @memberof RecurringPaymentDetails
     */
    startDate?: string;
    /**
     * Date of next transaction process attempt.
     * @type {string}
     * @memberof RecurringPaymentDetails
     */
    nextAttemptDate?: string;
    /**
     *
     * @type {Amount}
     * @memberof RecurringPaymentDetails
     */
    transactionAmount?: Amount;
    /**
     *
     * @type {PaymentMethodDetails}
     * @memberof RecurringPaymentDetails
     */
    paymentMethodDetails?: PaymentMethodDetails;
    /**
     *
     * @type {Frequency}
     * @memberof RecurringPaymentDetails
     */
    frequency?: Frequency;
    /**
     * Number of times the recurring payment will process.
     * @type {number}
     * @memberof RecurringPaymentDetails
     */
    numberOfPayments?: number;
    /**
     * Times the recurring payment has already run.
     * @type {number}
     * @memberof RecurringPaymentDetails
     */
    runCount?: number;
    /**
     * State of the recurring payment.
     * @type {string}
     * @memberof RecurringPaymentDetails
     */
    state?: RecurringPaymentDetails.StateEnum;
    /**
     * User supplied comments.
     * @type {string}
     * @memberof RecurringPaymentDetails
     */
    comments?: string;
}
/**
 * @export
 * @namespace RecurringPaymentDetails
 */
export declare namespace RecurringPaymentDetails {
    /**
     * @export
     * @enum {string}
     */
    enum StateEnum {
        Installed = "Installed",
        Inactivated = "Inactivated",
        Cancelled = "Cancelled"
    }
}
/**
 * Order response containing recurring payment details.
 * @export
 * @interface RecurringPaymentDetailsResponse
 */
export interface RecurringPaymentDetailsResponse extends OrderResponse {
    /**
     *
     * @type {RecurringPaymentDetails}
     * @memberof RecurringPaymentDetailsResponse
     */
    recurringPaymentDetails?: RecurringPaymentDetails;
}
/**
 * Request to create a new payment schedule using a referenced order ID.
 * @export
 * @interface ReferencedOrderPaymentSchedulesRequest
 */
export interface ReferencedOrderPaymentSchedulesRequest extends PaymentSchedulesRequest {
    /**
     * Order ID used to create recurring payment from existing transaction.
     * @type {string}
     * @memberof ReferencedOrderPaymentSchedulesRequest
     */
    referencedOrderId: string;
}
/**
 * Used to generate payment tokens with an existing order ID.
 * @export
 * @interface ReferencedOrderPaymentTokenizationRequest
 */
export interface ReferencedOrderPaymentTokenizationRequest extends PaymentTokenizationRequest {
    /**
     * Retrieves the payment instrument information from an existing order.
     * @type {string}
     * @memberof ReferencedOrderPaymentTokenizationRequest
     */
    referencedOrderId: string;
}
/**
 * Amount component details, used in responses.
 * @export
 * @interface ResponseAmountComponents
 */
export interface ResponseAmountComponents extends AmountComponents {
    /**
     * Amount added for proccessing or handling fees.
     * @type {number}
     * @memberof ResponseAmountComponents
     */
    convenienceFee?: number;
}
/**
 * The type of the response.
 * @export
 * @enum {string}
 */
export declare enum ResponseType {
    BadRequest = "BadRequest",
    Unauthenticated = "Unauthenticated",
    Unauthorized = "Unauthorized",
    NotFound = "NotFound",
    GatewayDeclined = "GatewayDeclined",
    EndpointDeclined = "EndpointDeclined",
    ServerError = "ServerError",
    EndpointCommunicationError = "EndpointCommunicationError",
    UnsupportedMediaType = "UnsupportedMediaType"
}
/**
 * Request to perform return transaction.
 * @export
 * @interface ReturnTransaction
 */
export interface ReturnTransaction extends SecondaryTransaction {
    /**
     *
     * @type {Amount}
     * @memberof ReturnTransaction
     */
    transactionAmount: Amount;
    /**
     *
     * @type {SoftDescriptor}
     * @memberof ReturnTransaction
     */
    softDescriptor?: SoftDescriptor;
    /**
     *
     * @type {CurrencyConversion}
     * @memberof ReturnTransaction
     */
    currencyConversion?: CurrencyConversion;
}
/**
 * Fraud detect request payload.
 * @export
 * @interface ScoreOnlyRequest
 */
export interface ScoreOnlyRequest {
    /**
     * Merchant reference code. Used by FirstAPI and reflected in settlement records and Webhook notifications. Typically, the merchantRef field is the purchase order number or unique sequence value associated to a given transaction.
     * @type {string}
     * @memberof ScoreOnlyRequest
     */
    merchantRef?: string;
    /**
     * Type of transaction merchant wants to process.
     * @type {string}
     * @memberof ScoreOnlyRequest
     */
    transactionType: ScoreOnlyRequest.TransactionTypeEnum;
    /**
     * Defines the type of the original transaction that is being evaluated for the Fraud Score.
     * @type {string}
     * @memberof ScoreOnlyRequest
     */
    originalTransactionType: ScoreOnlyRequest.OriginalTransactionTypeEnum;
    /**
     * The unique ID of this transaction. Must be unique for the entire system (not just within a specific merchant or industry). Subsequent requests related to the same transaction must have the same transactionId (e.g. transaction/deposit or transaction/authorization-reversal). This field is used for matching transactions with settlement and chargeback information. If there is no such ID available you may wish to compose one from fields available in both systems. Consider including backend, issuer, merchant id, date and time, amount, etc. as necessary.
     * @type {string}
     * @memberof ScoreOnlyRequest
     */
    originalTransactionId: string;
    /**
     * The amount processed for the original transaction.
     * @type {string}
     * @memberof ScoreOnlyRequest
     */
    amount: string;
    /**
     * The currency of the original transaction.
     * @type {string}
     * @memberof ScoreOnlyRequest
     */
    currencyCode: string;
    /**
     *
     * @type {Customer}
     * @memberof ScoreOnlyRequest
     */
    customer?: Customer;
    /**
     *
     * @type {BillingAddress}
     * @memberof ScoreOnlyRequest
     */
    billingAddress?: BillingAddress;
    /**
     *
     * @type {Device}
     * @memberof ScoreOnlyRequest
     */
    device?: Device;
    /**
     *
     * @type {Loyalty}
     * @memberof ScoreOnlyRequest
     */
    loyalty?: Loyalty;
    /**
     *
     * @type {Payment}
     * @memberof ScoreOnlyRequest
     */
    payment: Payment;
    /**
     *
     * @type {Merchant}
     * @memberof ScoreOnlyRequest
     */
    merchant: Merchant;
    /**
     *
     * @type {FraudOrder}
     * @memberof ScoreOnlyRequest
     */
    order?: FraudOrder;
    /**
     * A JSON object that can carry any additional information that might be helpful for fraud detection.
     * @type {any}
     * @memberof ScoreOnlyRequest
     */
    userDefined?: any;
}
/**
 * @export
 * @namespace ScoreOnlyRequest
 */
export declare namespace ScoreOnlyRequest {
    /**
     * @export
     * @enum {string}
     */
    enum TransactionTypeEnum {
        ScoreOnly = "scoreOnly"
    }
    /**
     * @export
     * @enum {string}
     */
    enum OriginalTransactionTypeEnum {
        Authorization = "transaction/authorization",
        AuthorizationReversal = "transaction/authorization-reversal",
        Deposit = "transaction/deposit",
        DepositReversal = "transaction/deposit-reversal",
        Purchase = "transaction/purchase",
        PurchaseReversal = "transaction/purchase-reversal",
        RefundAuthorization = "transaction/refund-authorization",
        RefundDeposit = "transaction/refund-deposit",
        Verification = "transaction/verification",
        BalanceInquiry = "transaction/balance-inquiry"
    }
}
/**
 * Fraud detect response.
 * @export
 * @interface ScoreOnlyResponse
 */
export interface ScoreOnlyResponse {
    /**
     * Unique trace ID for issue triage.
     * @type {string}
     * @memberof ScoreOnlyResponse
     */
    apiTraceId?: string;
    /**
     * Please refer to \"Errors Section\" for more info.
     * @type {string}
     * @memberof ScoreOnlyResponse
     */
    transactionStatus?: ScoreOnlyResponse.TransactionStatusEnum;
    /**
     * If status returned is \"failure\", input validation errors occurred. Please refer to the \"Errors Section\" for more info. Valid values are 'success' and 'failure'.
     * @type {string}
     * @memberof ScoreOnlyResponse
     */
    validationStatus?: string;
    /**
     * The transactionType provided in request.
     * @type {string}
     * @memberof ScoreOnlyResponse
     */
    transactionType?: string;
    /**
     *
     * @type {ScoreOnlyResponseFraudScore}
     * @memberof ScoreOnlyResponse
     */
    fraudScore?: ScoreOnlyResponseFraudScore;
    /**
     * The action that should be taken for the request that was sent.
     * @type {string}
     * @memberof ScoreOnlyResponse
     */
    recommendedDecision?: string;
}
/**
 * @export
 * @namespace ScoreOnlyResponse
 */
export declare namespace ScoreOnlyResponse {
    /**
     * @export
     * @enum {string}
     */
    enum TransactionStatusEnum {
        ScoredSuccessfully = "Scored successfully",
        NotProcessed = "Not Processed"
    }
}
/**
 * Fraud likelihood assessment consisting of a score, associated warning(s), and explanation(s) of score received.
 * @export
 * @interface ScoreOnlyResponseFraudScore
 */
export interface ScoreOnlyResponseFraudScore {
    /**
     * The score attributed to this request by our machine learning system, ranging from 0 (less likely to be fraud) to 1000 (more likely to be fraud).
     * @type {string}
     * @memberof ScoreOnlyResponseFraudScore
     */
    score?: string;
    /**
     * A list of non-critical warnings raised while processing the request. Warnings included in this list will have integration and data-quality related messages.
     * @type {Array<string>}
     * @memberof ScoreOnlyResponseFraudScore
     */
    warnings?: Array<string>;
    /**
     * Explanation of the fraud score applied consisting of a description, type of the explanation, and rule (if applicable).
     * @type {Array<ScoreOnlyResponseFraudScoreExplanations>}
     * @memberof ScoreOnlyResponseFraudScore
     */
    explanations?: Array<ScoreOnlyResponseFraudScoreExplanations>;
}
/**
 *
 * @export
 * @interface ScoreOnlyResponseFraudScoreExplanations
 */
export interface ScoreOnlyResponseFraudScoreExplanations {
    /**
     * Description of the fraud score explanation.
     * @type {string}
     * @memberof ScoreOnlyResponseFraudScoreExplanations
     */
    description?: string;
    /**
     * ID of the rule being triggered.
     * @type {string}
     * @memberof ScoreOnlyResponseFraudScoreExplanations
     */
    rule?: string;
    /**
     * Type of the explanation (model or rule).
     * @type {string}
     * @memberof ScoreOnlyResponseFraudScoreExplanations
     */
    type?: string;
}
/**
 * Model for secondary financial transactions. Abstract class, do not use this class directly, use one of its children.
 * @export
 * @interface SecondaryTransaction
 */
export interface SecondaryTransaction {
    /**
     * Object name of the secondary transaction request.
     * @type {string}
     * @memberof SecondaryTransaction
     */
    requestType: string;
    /**
     * An optional outlet ID for clients that support multiple stores in the same developer app.
     * @type {string}
     * @memberof SecondaryTransaction
     */
    storeId?: string;
    /**
     * Comment for the secondary transaction.
     * @type {string}
     * @memberof SecondaryTransaction
     */
    comments?: string;
}
/**
 * Request authentication of the payment card using the 3DS URL redirect scheme.
 * @export
 * @interface Secure3dAuthenticationRequest
 */
export interface Secure3dAuthenticationRequest extends Authentication {
}
/**
 * Submit the result of the authentication managed outside of the gateway. For more convenient usage without implementing 3-D Secure yourself see \"authenticationRequest\" section.
 * @export
 * @interface Secure3dAuthenticationResult
 */
export interface Secure3dAuthenticationResult extends Authentication {
    /**
     * Card enrollment result from the Verification Response (VeRes).
     * @type {string}
     * @memberof Secure3dAuthenticationResult
     */
    verificationResponse?: Secure3dAuthenticationResult.VerificationResponseEnum;
    /**
     * Result of authentication attempt from Payer Authentication Response (PaRes).
     * @type {string}
     * @memberof Secure3dAuthenticationResult
     */
    authenticationAttemptResult?: Secure3dAuthenticationResult.AuthenticationAttemptResultEnum;
    /**
     * The Cardholder Authentication Verification Value (CAVV) is a cryptographic value derived by the issuer during payment authentication that can provide evidence of the results of payment authentication during an online purchase.
     * @type {string}
     * @memberof Secure3dAuthenticationResult
     */
    authenticationValue?: string;
    /**
     * The transaction identifier (XID) is a unique tracking number set by the merchant.
     * @type {string}
     * @memberof Secure3dAuthenticationResult
     */
    xid?: string;
}
/**
 * @export
 * @namespace Secure3dAuthenticationResult
 */
export declare namespace Secure3dAuthenticationResult {
    /**
     * @export
     * @enum {string}
     */
    enum VerificationResponseEnum {
        Y = "Y",
        N = "N",
        U = "U"
    }
    /**
     * @export
     * @enum {string}
     */
    enum AuthenticationAttemptResultEnum {
        Y = "Y",
        N = "N",
        U = "U",
        A = "A"
    }
}
/**
 * Authentication verification request specific to 3DSecure transactions.
 * @export
 * @interface Secure3dAuthenticationVerificationRequest
 */
export interface Secure3dAuthenticationVerificationRequest extends AuthenticationVerificationRequest {
    /**
     * A formatted message providing results of the issuer’s cardholder authentication.
     * @type {string}
     * @memberof Secure3dAuthenticationVerificationRequest
     */
    payerAuthenticationResponse: string;
    /**
     * Formatted string encoding transaction time, order ID, and return URL data.
     * @type {string}
     * @memberof Secure3dAuthenticationVerificationRequest
     */
    merchantData: string;
}
/**
 * Contains 3DSecure response code.
 * @export
 * @interface Secure3dResponse
 */
export interface Secure3dResponse {
    /**
     * Code received after successful payer-auth verification.
     * @type {string}
     * @memberof Secure3dResponse
     */
    responseCode3dSecure?: string;
}
/**
 * The payment object for SEPA Local Payment.
 * @export
 * @interface Sepa
 */
export interface Sepa {
    /**
     * Bank account in IBAN format.
     * @type {string}
     * @memberof Sepa
     */
    iban: string;
    /**
     * The name of the payer.
     * @type {string}
     * @memberof Sepa
     */
    name: string;
    /**
     * Country of residence of the payer using the ISO 3166 standard.
     * @type {string}
     * @memberof Sepa
     */
    country: string;
    /**
     * The email address of the payer.
     * @type {string}
     * @memberof Sepa
     */
    email?: string;
    /**
     *
     * @type {SepaMandate}
     * @memberof Sepa
     */
    mandate: SepaMandate;
}
/**
 * Model for the SEPA Mandate information.
 * @export
 * @interface SepaMandate
 */
export interface SepaMandate {
    /**
     * Existing mandate reference, managed by merchant. Must match [A-Za-z0-9:?/+(),. -]{1,35} and not start with two slashes (\"//\"). Also known as the mandate ID.
     * @type {string}
     * @memberof SepaMandate
     */
    reference: string;
    /**
     * Valid URL pointing to the SEPA mandate (PDF / HTML format recommended).
     * @type {string}
     * @memberof SepaMandate
     */
    url: string;
    /**
     * Date of mandate signature.
     * @type {string}
     * @memberof SepaMandate
     */
    signatureDate: string;
    /**
     * Sequence type of the direct debit. This defaults to 'SINGLE' if not provided.
     * @type {string}
     * @memberof SepaMandate
     */
    type: SepaMandate.TypeEnum;
}
/**
 * @export
 * @namespace SepaMandate
 */
export declare namespace SepaMandate {
    /**
     * @export
     * @enum {string}
     */
    enum TypeEnum {
        SINGLE = "SINGLE",
        FIRSTCOLLECTION = "FIRST_COLLECTION",
        RECURRINGCOLLECTION = "RECURRING_COLLECTION",
        FINALCOLLECTION = "FINAL_COLLECTION"
    }
}
/**
 * Payment method containing sepa information.
 * @export
 * @interface SepaPaymentMethod
 */
export interface SepaPaymentMethod extends PaymentMethod {
    /**
     *
     * @type {Sepa}
     * @memberof SepaPaymentMethod
     */
    sepa: Sepa;
}
/**
 * Request to create sale transaction using sepa.
 * @export
 * @interface SepaSaleTransaction
 */
export interface SepaSaleTransaction extends PrimaryTransaction {
    /**
     *
     * @type {SepaPaymentMethod}
     * @memberof SepaSaleTransaction
     */
    paymentMethod: SepaPaymentMethod;
}
/**
 * Shipping information.
 * @export
 * @interface Shipping
 */
export interface Shipping {
    /**
     * Name of customer for shipping.
     * @type {string}
     * @memberof Shipping
     */
    name?: string;
    /**
     *
     * @type {Contact}
     * @memberof Shipping
     */
    contact?: Contact;
    /**
     *
     * @type {Address}
     * @memberof Shipping
     */
    address?: Address;
}
/**
 * Identifying information about a merchant which appears on buyer's credit/debit card statements.
 * @export
 * @interface SoftDescriptor
 */
export interface SoftDescriptor {
    /**
     * Store \"doing-business-as\" name.
     * @type {string}
     * @memberof SoftDescriptor
     */
    dynamicMerchantName: string;
    /**
     * The 4-digit merchant category code (MCC). The merchant might be associated with multiple MCCs. In that case the MCC provided here will be the one that better describes the current transaction.
     * @type {string}
     * @memberof SoftDescriptor
     */
    mcc?: string;
}
/**
 * Split-shipment related information, in order to reuse the same authorization.
 * @export
 * @interface SplitShipment
 */
export interface SplitShipment {
    /**
     * Total count of the shipment, can be set at preauth or the first postauth.
     * @type {number}
     * @memberof SplitShipment
     */
    totalCount?: number;
    /**
     * Indicates whether the transaction is the final shipment.
     * @type {boolean}
     * @memberof SplitShipment
     */
    finalShipment?: boolean;
}
/**
 * Object for sending stored credentials.
 * @export
 * @interface StoredCredential
 */
export interface StoredCredential {
    /**
     * Indicates if the transaction is first or subsequent. Valid values are 'FIRST' and 'SUBSEQUENT'.
     * @type {string}
     * @memberof StoredCredential
     */
    sequence: StoredCredential.SequenceEnum;
    /**
     * Indicates if the transaction is scheduled or part of an installment.
     * @type {boolean}
     * @memberof StoredCredential
     */
    scheduled: boolean;
    /**
     * The transaction ID received from schemes for the initial transaction. Required if sequence is 'SUBSEQUENT'.
     * @type {string}
     * @memberof StoredCredential
     */
    referencedSchemeTransactionId?: string;
    /**
     * Indicates whether it is a merchant-initiated or explicitly consented to by card holder. Valid values are 'MERCHANT' and 'CARDHOLDER'.
     * @type {string}
     * @memberof StoredCredential
     */
    initiator?: StoredCredential.InitiatorEnum;
}
/**
 * @export
 * @namespace StoredCredential
 */
export declare namespace StoredCredential {
    /**
     * @export
     * @enum {string}
     */
    enum SequenceEnum {
        FIRST = "FIRST",
        SUBSEQUENT = "SUBSEQUENT"
    }
    /**
     * @export
     * @enum {string}
     */
    enum InitiatorEnum {
        MERCHANT = "MERCHANT",
        CARDHOLDER = "CARDHOLDER"
    }
}
/**
 * Once sub-merchant element is given, the transaction is considered to be a sub-merchant transaction.
 * @export
 * @interface SubMerchantData
 */
export interface SubMerchantData {
    /**
     * Merchant category code.
     * @type {string}
     * @memberof SubMerchantData
     */
    mcc: string;
    /**
     * Store legal name.
     * @type {string}
     * @memberof SubMerchantData
     */
    legalName?: string;
    /**
     * Timezone.
     * @type {string}
     * @memberof SubMerchantData
     */
    timezone?: string;
    /**
     *
     * @type {Address}
     * @memberof SubMerchantData
     */
    address?: Address;
    /**
     *
     * @type {Document}
     * @memberof SubMerchantData
     */
    document?: Document;
    /**
     * Sub-merchant ID.
     * @type {string}
     * @memberof SubMerchantData
     */
    merchantId?: string;
}
/**
 * Sub-merchant split object for SettlementSplit.
 * @export
 * @interface SubMerchantSplit
 */
export interface SubMerchantSplit {
    /**
     * ID of merchant for tracking.
     * @type {string}
     * @memberof SubMerchantSplit
     */
    merchantID: string;
    /**
     * The amount each sub-merchant receives.
     * @type {number}
     * @memberof SubMerchantSplit
     */
    amount: number;
}
/**
 * Common object for transaction.
 * @export
 * @interface Transaction
 */
export interface Transaction {
    /**
     * The state of the transaction.
     * @type {string}
     * @memberof Transaction
     */
    transactionState?: Transaction.TransactionStateEnum;
    /**
     * The transaction ID.
     * @type {string}
     * @memberof Transaction
     */
    ipgTransactionId?: string;
    /**
     * Client order ID if supplied by client.
     * @type {string}
     * @memberof Transaction
     */
    orderId?: string;
    /**
     *
     * @type {TransactionType}
     * @memberof Transaction
     */
    transactionType?: TransactionType;
    /**
     *
     * @type {PaymentMethodDetails}
     * @memberof Transaction
     */
    paymentMethodDetails?: PaymentMethodDetails;
    /**
     *
     * @type {Amount}
     * @memberof Transaction
     */
    transactionAmount?: Amount;
    /**
     * The submission component.
     * @type {string}
     * @memberof Transaction
     */
    submissionComponent?: Transaction.SubmissionComponentEnum;
    /**
     * The payer security level.
     * @type {string}
     * @memberof Transaction
     */
    payerSecurityLevel?: string;
    /**
     * The transaction time in seconds since epoch.
     * @type {number}
     * @memberof Transaction
     */
    transactionTime?: number;
    /**
     * Store ID number.
     * @type {string}
     * @memberof Transaction
     */
    storeId?: string;
    /**
     * The user ID.
     * @type {string}
     * @memberof Transaction
     */
    userId?: string;
    /**
     *
     * @type {ProcessorData}
     * @memberof Transaction
     */
    processor?: ProcessorData;
}
/**
 * @export
 * @namespace Transaction
 */
export declare namespace Transaction {
    /**
     * @export
     * @enum {string}
     */
    enum TransactionStateEnum {
        AUTHORIZED = "AUTHORIZED",
        CAPTURED = "CAPTURED",
        COMPLETEDGET = "COMPLETED_GET",
        DECLINED = "DECLINED",
        CHECKED = "CHECKED",
        INITIALIZED = "INITIALIZED",
        PENDINGAUTHORIZATION = "PENDING_AUTHORIZATION",
        PENDINGAUTOVOID = "PENDING_AUTOVOID",
        PENDINGCAPTURE = "PENDING_CAPTURE",
        PENDINGCREDIT = "PENDING_CREDIT",
        PENDINGGIROPAYINIT = "PENDING_GIROPAY_INIT",
        PENDINGIDEALINIT = "PENDING_IDEAL_INIT",
        PENDINGINIT = "PENDING_INIT",
        PENDINGREADY = "PENDING_READY",
        PENDINGRETURN = "PENDING_RETURN",
        PENDINGSETTLEMENT = "PENDING_SETTLEMENT",
        PENDINGSOFORTINIT = "PENDING_SOFORT_INIT",
        PENDINGVOID = "PENDING_VOID",
        READY = "READY",
        SETTLED = "SETTLED",
        VOIDED = "VOIDED",
        WAITING = "WAITING",
        WAITINGAUTHENTICATION = "WAITING_AUTHENTICATION",
        WAITING3DSECURE = "WAITING_3D_SECURE",
        WAITINGCLICKANDBUY = "WAITING_CLICK_AND_BUY",
        WAITINGGIROPAY = "WAITING_GIROPAY",
        WAITINGIDEAL = "WAITING_IDEAL",
        WAITINGKLARNA = "WAITING_KLARNA",
        WAITINGPAYPAL = "WAITING_PAYPAL",
        WAITINGPAYPALEVENT = "WAITING_PAYPAL_EVENT",
        WAITINGPPROLONGWAITING = "WAITING_PPRO_LONG_WAITING",
        WAITINGSOFORT = "WAITING_SOFORT",
        WAITINGTPAY = "WAITING_T_PAY",
        WAITINGALIPAYPAYSECURE = "WAITING_ALIPAY_PAYSECURE"
    }
    /**
     * @export
     * @enum {string}
     */
    enum SubmissionComponentEnum {
        API = "API",
        BUS = "BUS",
        CONNECT = "CONNECT",
        CORE = "CORE",
        EPAS = "EPAS",
        MCS = "MCS",
        RESTAPI = "RESTAPI",
        SWITCH = "SWITCH",
        VT = "VT"
    }
}
/**
 * Transaction response with error field included.
 * @export
 * @interface TransactionErrorResponse
 */
export interface TransactionErrorResponse extends TransactionResponse {
    /**
     *
     * @type {Error}
     * @memberof TransactionErrorResponse
     */
    error?: Error;
}
/**
 * @export
 * @namespace TransactionErrorResponse
 */
export declare namespace TransactionErrorResponse {
}
/**
 * The source of the transaction. The possible values are ECOM (if the order was received via email or Internet), MAIL, PHONE and RETAIL (face to face).
 * @export
 * @enum {string}
 */
export declare enum TransactionOrigin {
    ECOM = "ECOM",
    MAIL = "MAIL",
    PHONE = "PHONE",
    RETAIL = "RETAIL"
}
/**
 * Common object for primary and secondary payment request responses.
 * @export
 * @interface TransactionResponse
 */
export interface TransactionResponse extends BasicResponse {
    /**
     * The response transaction ID.
     * @type {string}
     * @memberof TransactionResponse
     */
    ipgTransactionId?: string;
    /**
     * Client order ID if supplied by client, otherwise the order ID.
     * @type {string}
     * @memberof TransactionResponse
     */
    orderId?: string;
    /**
     *
     * @type {TransactionType}
     * @memberof TransactionResponse
     */
    transactionType?: TransactionType;
    /**
     *
     * @type {PaymentTokenDetails}
     * @memberof TransactionResponse
     */
    paymentToken?: PaymentTokenDetails;
    /**
     *
     * @type {TransactionOrigin}
     * @memberof TransactionResponse
     */
    transactionOrigin?: TransactionOrigin;
    /**
     *
     * @type {PaymentMethodDetails}
     * @memberof TransactionResponse
     */
    paymentMethodDetails?: PaymentMethodDetails;
    /**
     * Country of the card issuer.
     * @type {string}
     * @memberof TransactionResponse
     */
    country?: string;
    /**
     * The terminal that is processing the transaction.
     * @type {string}
     * @memberof TransactionResponse
     */
    terminalId?: string;
    /**
     * The unique merchant transaction ID from the request header, if supplied.
     * @type {string}
     * @memberof TransactionResponse
     */
    merchantTransactionId?: string;
    /**
     * The transaction time in seconds since epoch.
     * @type {number}
     * @memberof TransactionResponse
     */
    transactionTime?: number;
    /**
     *
     * @type {Amount}
     * @memberof TransactionResponse
     */
    approvedAmount?: Amount;
    /**
     * The status of the transaction. APPROVED/WAITING are returned by the endpoints.  VALIDATION_FAILED/DECLINED are errors. See ErrorResponse object for details.
     * @type {string}
     * @memberof TransactionResponse
     */
    transactionStatus?: TransactionResponse.TransactionStatusEnum;
    /**
     * The state of the transaction.
     * @type {string}
     * @memberof TransactionResponse
     */
    transactionState?: TransactionResponse.TransactionStateEnum;
    /**
     *
     * @type {Secure3dResponse}
     * @memberof TransactionResponse
     */
    secure3dResponse?: Secure3dResponse;
    /**
     * The endpoint redirection URL.
     * @type {string}
     * @memberof TransactionResponse
     */
    redirectURL?: string;
    /**
     *
     * @type {AuthenticationRedirect}
     * @memberof TransactionResponse
     */
    authenticationRedirect?: AuthenticationRedirect;
    /**
     * The transaction ID received from schemes for the initial transaction of card on file flows.
     * @type {string}
     * @memberof TransactionResponse
     */
    schemeTransactionId?: string;
    /**
     *
     * @type {ProcessorData}
     * @memberof TransactionResponse
     */
    processor?: ProcessorData;
    /**
     *
     * @type {AdditionalTransactionDetails}
     * @memberof TransactionResponse
     */
    additionalDetails?: AdditionalTransactionDetails;
    /**
     *
     * @type {AccountUpdaterResponse}
     * @memberof TransactionResponse
     */
    accountUpdaterResponse?: AccountUpdaterResponse;
}
/**
 * @export
 * @namespace TransactionResponse
 */
export declare namespace TransactionResponse {
    /**
     * @export
     * @enum {string}
     */
    enum TransactionStatusEnum {
        APPROVED = "APPROVED",
        WAITING = "WAITING",
        VALIDATIONFAILED = "VALIDATION_FAILED",
        PROCESSINGFAILED = "PROCESSING_FAILED",
        DECLINED = "DECLINED"
    }
    /**
     * @export
     * @enum {string}
     */
    enum TransactionStateEnum {
        AUTHORIZED = "AUTHORIZED",
        CAPTURED = "CAPTURED",
        DECLINED = "DECLINED",
        CHECKED = "CHECKED",
        COMPLETEDGET = "COMPLETED_GET",
        INITIALIZED = "INITIALIZED",
        PENDING = "PENDING",
        READY = "READY",
        TEMPLATE = "TEMPLATE",
        SETTLED = "SETTLED",
        VOIDED = "VOIDED",
        WAITING = "WAITING"
    }
}
/**
 * Type of transaction to perform. Primary transaction types in requests include 'SALE', 'PREAUTH', 'CREDIT' and 'FORCED_TICKET'.
 * @export
 * @enum {string}
 */
export declare enum TransactionType {
    SALE = "SALE",
    PREAUTH = "PREAUTH",
    CREDIT = "CREDIT",
    FORCEDTICKET = "FORCED_TICKET",
    VOID = "VOID",
    RETURN = "RETURN",
    POSTAUTH = "POSTAUTH",
    PAYERAUTH = "PAYER_AUTH"
}
/**
 * Request authentication of the payment card using the UnionPay SMS scheme.
 * @export
 * @interface UnionPayAuthenticationRequest
 */
export interface UnionPayAuthenticationRequest extends Authentication {
    /**
     * Mobile number for SMS verification.
     * @type {string}
     * @memberof UnionPayAuthenticationRequest
     */
    smsPhoneNumber: string;
}
/**
 * Authentication verification request specific to UnionPay transactions.
 * @export
 * @interface UnionPayAuthenticationVerificationRequest
 */
export interface UnionPayAuthenticationVerificationRequest extends AuthenticationVerificationRequest {
    /**
     * Customer mobile number for SMS verification.
     * @type {string}
     * @memberof UnionPayAuthenticationVerificationRequest
     */
    smsVerificationCode: string;
}
/**
 * Payment token usage details.
 * @export
 * @interface UsePaymentToken
 */
export interface UsePaymentToken {
    /**
     * Client-supplied payment token value.
     * @type {string}
     * @memberof UsePaymentToken
     */
    value: string;
    /**
     *
     * @type {CardFunction}
     * @memberof UsePaymentToken
     */
    _function?: CardFunction;
    /**
     * Card verification value/number.
     * @type {string}
     * @memberof UsePaymentToken
     */
    securityCode?: string;
}
/**
 * Request to perform void transaction.
 * @export
 * @interface VoidTransaction
 */
export interface VoidTransaction extends SecondaryTransaction {
}
/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export declare const AuthenticationApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * This is the access token generation call for authorizing subsequent financial transactions. A valid access token is required for web client requests.
     * @summary Generate an access token for user authentication.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authenticationAccessTokensPost(contentType: "application/json", clientRequestId: string, apiKey: string, timestamp: number, messageSignature?: string | undefined, options?: any): RequestArgs;
};
/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export declare const AuthenticationApiFp: (configuration?: Configuration | undefined) => {
    /**
     * This is the access token generation call for authorizing subsequent financial transactions. A valid access token is required for web client requests.
     * @summary Generate an access token for user authentication.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authenticationAccessTokensPost(contentType: "application/json", clientRequestId: string, apiKey: string, timestamp: number, messageSignature?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<AccessTokenResponse>;
};
/**
 * AuthenticationApi - factory interface
 * @export
 */
export declare const AuthenticationApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * This is the access token generation call for authorizing subsequent financial transactions. A valid access token is required for web client requests.
     * @summary Generate an access token for user authentication.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authenticationAccessTokensPost(contentType: "application/json", clientRequestId: string, apiKey: string, timestamp: number, messageSignature?: string | undefined, options?: any): AxiosPromise<AccessTokenResponse>;
};
/**
 * AuthenticationApi - interface
 * @export
 * @interface AuthenticationApi
 */
export interface AuthenticationApiInterface {
    /**
     * This is the access token generation call for authorizing subsequent financial transactions. A valid access token is required for web client requests.
     * @summary Generate an access token for user authentication.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    authenticationAccessTokensPost(contentType: 'application/json', clientRequestId: string, apiKey: string, timestamp: number, messageSignature?: string, options?: any): AxiosPromise<AccessTokenResponse>;
}
/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export declare class AuthenticationApi extends BaseAPI implements AuthenticationApiInterface {
    /**
     * This is the access token generation call for authorizing subsequent financial transactions. A valid access token is required for web client requests.
     * @summary Generate an access token for user authentication.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    authenticationAccessTokensPost(contentType: 'application/json', clientRequestId: string, apiKey: string, timestamp: number, messageSignature?: string, options?: any): AxiosPromise<AccessTokenResponse>;
}
/**
 * CardInfoLookupApi - axios parameter creator
 * @export
 */
export declare const CardInfoLookupApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Use this to look up card related information such as issuer country, card function and card brand.
     * @summary Card information lookup.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {CardInfoLookupRequest} cardInfoLookupRequest Accepted request type: CardInfoLookupRequest.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cardInfoLookup(contentType: "application/json", clientRequestId: string, apiKey: string, timestamp: number, cardInfoLookupRequest: CardInfoLookupRequest, messageSignature?: string | undefined, region?: string | undefined, options?: any): RequestArgs;
};
/**
 * CardInfoLookupApi - functional programming interface
 * @export
 */
export declare const CardInfoLookupApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Use this to look up card related information such as issuer country, card function and card brand.
     * @summary Card information lookup.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {CardInfoLookupRequest} cardInfoLookupRequest Accepted request type: CardInfoLookupRequest.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cardInfoLookup(contentType: "application/json", clientRequestId: string, apiKey: string, timestamp: number, cardInfoLookupRequest: CardInfoLookupRequest, messageSignature?: string | undefined, region?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<CardInfoLookupResponse>;
};
/**
 * CardInfoLookupApi - factory interface
 * @export
 */
export declare const CardInfoLookupApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Use this to look up card related information such as issuer country, card function and card brand.
     * @summary Card information lookup.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {CardInfoLookupRequest} cardInfoLookupRequest Accepted request type: CardInfoLookupRequest.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cardInfoLookup(contentType: "application/json", clientRequestId: string, apiKey: string, timestamp: number, cardInfoLookupRequest: CardInfoLookupRequest, messageSignature?: string | undefined, region?: string | undefined, options?: any): AxiosPromise<CardInfoLookupResponse>;
};
/**
 * CardInfoLookupApi - interface
 * @export
 * @interface CardInfoLookupApi
 */
export interface CardInfoLookupApiInterface {
    /**
     * Use this to look up card related information such as issuer country, card function and card brand.
     * @summary Card information lookup.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {CardInfoLookupRequest} cardInfoLookupRequest Accepted request type: CardInfoLookupRequest.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardInfoLookupApiInterface
     */
    cardInfoLookup(contentType: 'application/json', clientRequestId: string, apiKey: string, timestamp: number, cardInfoLookupRequest: CardInfoLookupRequest, messageSignature?: string, region?: string, options?: any): AxiosPromise<CardInfoLookupResponse>;
}
/**
 * CardInfoLookupApi - object-oriented interface
 * @export
 * @class CardInfoLookupApi
 * @extends {BaseAPI}
 */
export declare class CardInfoLookupApi extends BaseAPI implements CardInfoLookupApiInterface {
    /**
     * Use this to look up card related information such as issuer country, card function and card brand.
     * @summary Card information lookup.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {CardInfoLookupRequest} cardInfoLookupRequest Accepted request type: CardInfoLookupRequest.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardInfoLookupApi
     */
    cardInfoLookup(contentType: 'application/json', clientRequestId: string, apiKey: string, timestamp: number, cardInfoLookupRequest: CardInfoLookupRequest, messageSignature?: string, region?: string, options?: any): AxiosPromise<CardInfoLookupResponse>;
}
/**
 * CardVerificationApi - axios parameter creator
 * @export
 */
export declare const CardVerificationApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Use this to perform card verification for a payment card.
     * @summary Verify a payment card.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {CardVerificationRequest} cardVerificationRequest Accepted request type: CardVerificationRequest.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    verifyCard(contentType: "application/json", clientRequestId: string, apiKey: string, timestamp: number, cardVerificationRequest: CardVerificationRequest, messageSignature?: string | undefined, region?: string | undefined, options?: any): RequestArgs;
};
/**
 * CardVerificationApi - functional programming interface
 * @export
 */
export declare const CardVerificationApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Use this to perform card verification for a payment card.
     * @summary Verify a payment card.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {CardVerificationRequest} cardVerificationRequest Accepted request type: CardVerificationRequest.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    verifyCard(contentType: "application/json", clientRequestId: string, apiKey: string, timestamp: number, cardVerificationRequest: CardVerificationRequest, messageSignature?: string | undefined, region?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<TransactionResponse>;
};
/**
 * CardVerificationApi - factory interface
 * @export
 */
export declare const CardVerificationApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Use this to perform card verification for a payment card.
     * @summary Verify a payment card.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {CardVerificationRequest} cardVerificationRequest Accepted request type: CardVerificationRequest.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    verifyCard(contentType: "application/json", clientRequestId: string, apiKey: string, timestamp: number, cardVerificationRequest: CardVerificationRequest, messageSignature?: string | undefined, region?: string | undefined, options?: any): AxiosPromise<TransactionResponse>;
};
/**
 * CardVerificationApi - interface
 * @export
 * @interface CardVerificationApi
 */
export interface CardVerificationApiInterface {
    /**
     * Use this to perform card verification for a payment card.
     * @summary Verify a payment card.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {CardVerificationRequest} cardVerificationRequest Accepted request type: CardVerificationRequest.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardVerificationApiInterface
     */
    verifyCard(contentType: 'application/json', clientRequestId: string, apiKey: string, timestamp: number, cardVerificationRequest: CardVerificationRequest, messageSignature?: string, region?: string, options?: any): AxiosPromise<TransactionResponse>;
}
/**
 * CardVerificationApi - object-oriented interface
 * @export
 * @class CardVerificationApi
 * @extends {BaseAPI}
 */
export declare class CardVerificationApi extends BaseAPI implements CardVerificationApiInterface {
    /**
     * Use this to perform card verification for a payment card.
     * @summary Verify a payment card.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {CardVerificationRequest} cardVerificationRequest Accepted request type: CardVerificationRequest.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardVerificationApi
     */
    verifyCard(contentType: 'application/json', clientRequestId: string, apiKey: string, timestamp: number, cardVerificationRequest: CardVerificationRequest, messageSignature?: string, region?: string, options?: any): AxiosPromise<TransactionResponse>;
}
/**
 * CurrencyConversionApi - axios parameter creator
 * @export
 */
export declare const CurrencyConversionApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Sale, return and lookup exchange rate with dynamic currency conversion option.
     * @summary Generate dynamic currency conversion transactions.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {ExchangeRateRequest} exchangeRateRequest Accepted request types: DCCExchangeRateRequest and DynamicPricingExchangeRateRequest.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExchangeRate(contentType: "application/json", clientRequestId: string, apiKey: string, timestamp: number, exchangeRateRequest: ExchangeRateRequest, messageSignature?: string | undefined, region?: string | undefined, options?: any): RequestArgs;
};
/**
 * CurrencyConversionApi - functional programming interface
 * @export
 */
export declare const CurrencyConversionApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Sale, return and lookup exchange rate with dynamic currency conversion option.
     * @summary Generate dynamic currency conversion transactions.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {ExchangeRateRequest} exchangeRateRequest Accepted request types: DCCExchangeRateRequest and DynamicPricingExchangeRateRequest.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExchangeRate(contentType: "application/json", clientRequestId: string, apiKey: string, timestamp: number, exchangeRateRequest: ExchangeRateRequest, messageSignature?: string | undefined, region?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ExchangeRateResponse>;
};
/**
 * CurrencyConversionApi - factory interface
 * @export
 */
export declare const CurrencyConversionApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Sale, return and lookup exchange rate with dynamic currency conversion option.
     * @summary Generate dynamic currency conversion transactions.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {ExchangeRateRequest} exchangeRateRequest Accepted request types: DCCExchangeRateRequest and DynamicPricingExchangeRateRequest.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExchangeRate(contentType: "application/json", clientRequestId: string, apiKey: string, timestamp: number, exchangeRateRequest: ExchangeRateRequest, messageSignature?: string | undefined, region?: string | undefined, options?: any): AxiosPromise<ExchangeRateResponse>;
};
/**
 * CurrencyConversionApi - interface
 * @export
 * @interface CurrencyConversionApi
 */
export interface CurrencyConversionApiInterface {
    /**
     * Sale, return and lookup exchange rate with dynamic currency conversion option.
     * @summary Generate dynamic currency conversion transactions.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {ExchangeRateRequest} exchangeRateRequest Accepted request types: DCCExchangeRateRequest and DynamicPricingExchangeRateRequest.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrencyConversionApiInterface
     */
    getExchangeRate(contentType: 'application/json', clientRequestId: string, apiKey: string, timestamp: number, exchangeRateRequest: ExchangeRateRequest, messageSignature?: string, region?: string, options?: any): AxiosPromise<ExchangeRateResponse>;
}
/**
 * CurrencyConversionApi - object-oriented interface
 * @export
 * @class CurrencyConversionApi
 * @extends {BaseAPI}
 */
export declare class CurrencyConversionApi extends BaseAPI implements CurrencyConversionApiInterface {
    /**
     * Sale, return and lookup exchange rate with dynamic currency conversion option.
     * @summary Generate dynamic currency conversion transactions.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {ExchangeRateRequest} exchangeRateRequest Accepted request types: DCCExchangeRateRequest and DynamicPricingExchangeRateRequest.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrencyConversionApi
     */
    getExchangeRate(contentType: 'application/json', clientRequestId: string, apiKey: string, timestamp: number, exchangeRateRequest: ExchangeRateRequest, messageSignature?: string, region?: string, options?: any): AxiosPromise<ExchangeRateResponse>;
}
/**
 * FraudDetectApi - axios parameter creator
 * @export
 */
export declare const FraudDetectApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Use this to obtain a fraud score for a transaction.
     * @summary Score a transaction for fraud.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {ScoreOnlyRequest} scoreOnlyRequest Accepted request type: ScoreOnlyRequest.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    scoreOnly(contentType: "application/json", clientRequestId: string, apiKey: string, timestamp: number, scoreOnlyRequest: ScoreOnlyRequest, messageSignature?: string | undefined, region?: string | undefined, options?: any): RequestArgs;
};
/**
 * FraudDetectApi - functional programming interface
 * @export
 */
export declare const FraudDetectApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Use this to obtain a fraud score for a transaction.
     * @summary Score a transaction for fraud.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {ScoreOnlyRequest} scoreOnlyRequest Accepted request type: ScoreOnlyRequest.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    scoreOnly(contentType: "application/json", clientRequestId: string, apiKey: string, timestamp: number, scoreOnlyRequest: ScoreOnlyRequest, messageSignature?: string | undefined, region?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ScoreOnlyResponse>;
};
/**
 * FraudDetectApi - factory interface
 * @export
 */
export declare const FraudDetectApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Use this to obtain a fraud score for a transaction.
     * @summary Score a transaction for fraud.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {ScoreOnlyRequest} scoreOnlyRequest Accepted request type: ScoreOnlyRequest.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    scoreOnly(contentType: "application/json", clientRequestId: string, apiKey: string, timestamp: number, scoreOnlyRequest: ScoreOnlyRequest, messageSignature?: string | undefined, region?: string | undefined, options?: any): AxiosPromise<ScoreOnlyResponse>;
};
/**
 * FraudDetectApi - interface
 * @export
 * @interface FraudDetectApi
 */
export interface FraudDetectApiInterface {
    /**
     * Use this to obtain a fraud score for a transaction.
     * @summary Score a transaction for fraud.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {ScoreOnlyRequest} scoreOnlyRequest Accepted request type: ScoreOnlyRequest.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FraudDetectApiInterface
     */
    scoreOnly(contentType: 'application/json', clientRequestId: string, apiKey: string, timestamp: number, scoreOnlyRequest: ScoreOnlyRequest, messageSignature?: string, region?: string, options?: any): AxiosPromise<ScoreOnlyResponse>;
}
/**
 * FraudDetectApi - object-oriented interface
 * @export
 * @class FraudDetectApi
 * @extends {BaseAPI}
 */
export declare class FraudDetectApi extends BaseAPI implements FraudDetectApiInterface {
    /**
     * Use this to obtain a fraud score for a transaction.
     * @summary Score a transaction for fraud.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {ScoreOnlyRequest} scoreOnlyRequest Accepted request type: ScoreOnlyRequest.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FraudDetectApi
     */
    scoreOnly(contentType: 'application/json', clientRequestId: string, apiKey: string, timestamp: number, scoreOnlyRequest: ScoreOnlyRequest, messageSignature?: string, region?: string, options?: any): AxiosPromise<ScoreOnlyResponse>;
}
/**
 * OrderApi - axios parameter creator
 * @export
 */
export declare const OrderApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Use this query to get the current state of an existing order.
     * @summary Retrieve the state of an order.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {string} orderId Gateway order identifier as returned in the parameter orderId.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {string} [storeId] An optional outlet ID for clients that support multiple stores in the same developer app.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orderInquiry(contentType: "application/json", clientRequestId: string, apiKey: string, timestamp: number, orderId: string, messageSignature?: string | undefined, region?: string | undefined, storeId?: string | undefined, options?: any): RequestArgs;
    /**
     * Use this to perform a postAuth or return secondary transaction using order ID. Partial postAuths and returns are allowed.
     * @summary Perform return or postAuth secondary transactions.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {string} orderId Gateway order identifier as returned in the parameter orderId.
     * @param {SecondaryTransaction} secondaryTransaction Accepted request types: PostAuthTransaction, VoidTransaction, and ReturnTransaction.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitSecondaryTransactionFromOrder(contentType: "application/json", clientRequestId: string, apiKey: string, timestamp: number, orderId: string, secondaryTransaction: SecondaryTransaction, messageSignature?: string | undefined, region?: string | undefined, options?: any): RequestArgs;
};
/**
 * OrderApi - functional programming interface
 * @export
 */
export declare const OrderApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Use this query to get the current state of an existing order.
     * @summary Retrieve the state of an order.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {string} orderId Gateway order identifier as returned in the parameter orderId.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {string} [storeId] An optional outlet ID for clients that support multiple stores in the same developer app.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orderInquiry(contentType: "application/json", clientRequestId: string, apiKey: string, timestamp: number, orderId: string, messageSignature?: string | undefined, region?: string | undefined, storeId?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<OrderResponse>;
    /**
     * Use this to perform a postAuth or return secondary transaction using order ID. Partial postAuths and returns are allowed.
     * @summary Perform return or postAuth secondary transactions.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {string} orderId Gateway order identifier as returned in the parameter orderId.
     * @param {SecondaryTransaction} secondaryTransaction Accepted request types: PostAuthTransaction, VoidTransaction, and ReturnTransaction.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitSecondaryTransactionFromOrder(contentType: "application/json", clientRequestId: string, apiKey: string, timestamp: number, orderId: string, secondaryTransaction: SecondaryTransaction, messageSignature?: string | undefined, region?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<TransactionResponse>;
};
/**
 * OrderApi - factory interface
 * @export
 */
export declare const OrderApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Use this query to get the current state of an existing order.
     * @summary Retrieve the state of an order.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {string} orderId Gateway order identifier as returned in the parameter orderId.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {string} [storeId] An optional outlet ID for clients that support multiple stores in the same developer app.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orderInquiry(contentType: "application/json", clientRequestId: string, apiKey: string, timestamp: number, orderId: string, messageSignature?: string | undefined, region?: string | undefined, storeId?: string | undefined, options?: any): AxiosPromise<OrderResponse>;
    /**
     * Use this to perform a postAuth or return secondary transaction using order ID. Partial postAuths and returns are allowed.
     * @summary Perform return or postAuth secondary transactions.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {string} orderId Gateway order identifier as returned in the parameter orderId.
     * @param {SecondaryTransaction} secondaryTransaction Accepted request types: PostAuthTransaction, VoidTransaction, and ReturnTransaction.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitSecondaryTransactionFromOrder(contentType: "application/json", clientRequestId: string, apiKey: string, timestamp: number, orderId: string, secondaryTransaction: SecondaryTransaction, messageSignature?: string | undefined, region?: string | undefined, options?: any): AxiosPromise<TransactionResponse>;
};
/**
 * OrderApi - interface
 * @export
 * @interface OrderApi
 */
export interface OrderApiInterface {
    /**
     * Use this query to get the current state of an existing order.
     * @summary Retrieve the state of an order.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {string} orderId Gateway order identifier as returned in the parameter orderId.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {string} [storeId] An optional outlet ID for clients that support multiple stores in the same developer app.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    orderInquiry(contentType: 'application/json', clientRequestId: string, apiKey: string, timestamp: number, orderId: string, messageSignature?: string, region?: string, storeId?: string, options?: any): AxiosPromise<OrderResponse>;
    /**
     * Use this to perform a postAuth or return secondary transaction using order ID. Partial postAuths and returns are allowed.
     * @summary Perform return or postAuth secondary transactions.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {string} orderId Gateway order identifier as returned in the parameter orderId.
     * @param {SecondaryTransaction} secondaryTransaction Accepted request types: PostAuthTransaction, VoidTransaction, and ReturnTransaction.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    submitSecondaryTransactionFromOrder(contentType: 'application/json', clientRequestId: string, apiKey: string, timestamp: number, orderId: string, secondaryTransaction: SecondaryTransaction, messageSignature?: string, region?: string, options?: any): AxiosPromise<TransactionResponse>;
}
/**
 * OrderApi - object-oriented interface
 * @export
 * @class OrderApi
 * @extends {BaseAPI}
 */
export declare class OrderApi extends BaseAPI implements OrderApiInterface {
    /**
     * Use this query to get the current state of an existing order.
     * @summary Retrieve the state of an order.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {string} orderId Gateway order identifier as returned in the parameter orderId.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {string} [storeId] An optional outlet ID for clients that support multiple stores in the same developer app.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    orderInquiry(contentType: 'application/json', clientRequestId: string, apiKey: string, timestamp: number, orderId: string, messageSignature?: string, region?: string, storeId?: string, options?: any): AxiosPromise<OrderResponse>;
    /**
     * Use this to perform a postAuth or return secondary transaction using order ID. Partial postAuths and returns are allowed.
     * @summary Perform return or postAuth secondary transactions.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {string} orderId Gateway order identifier as returned in the parameter orderId.
     * @param {SecondaryTransaction} secondaryTransaction Accepted request types: PostAuthTransaction, VoidTransaction, and ReturnTransaction.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    submitSecondaryTransactionFromOrder(contentType: 'application/json', clientRequestId: string, apiKey: string, timestamp: number, orderId: string, secondaryTransaction: SecondaryTransaction, messageSignature?: string, region?: string, options?: any): AxiosPromise<TransactionResponse>;
}
/**
 * PaymentApi - axios parameter creator
 * @export
 */
export declare const PaymentApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Use this to handle a 3DSecure redirect response or UnionPay authentication, updating the transaction and continuing processing.
     * @summary Update a 3DSecure or UnionPay payment and continue processing.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {string} transactionId Gateway transaction identifier as returned in the parameter ipgTransactionId.
     * @param {AuthenticationVerificationRequest} authenticationVerificationRequest Accepted request types: Secure3dAuthenticationVerificationRequest and UnionPayAuthenticationVerificationRequest.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    finalizeSecureTransaction(contentType: "application/json", clientRequestId: string, apiKey: string, timestamp: number, transactionId: string, authenticationVerificationRequest: AuthenticationVerificationRequest, messageSignature?: string | undefined, region?: string | undefined, options?: any): RequestArgs;
    /**
     * Use this to originate a financial transaction like a sale, preauthorization, or credit.
     * @summary Generate a primary transaction.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {PrimaryTransaction} primaryTransaction Accepted request types: AliPaySaleTransaction, ChinaPnRSaleTransaction, PaymentCardCreditTransaction, PaymentCardForcedTicketTransaction, PaymentCardSaleTransaction, PaymentCardPreAuthTransaction, PaymentCardPayerAuthTransaction, PaymentTokenCreditTransaction, PaymentTokenPreAuthTransaction, PaymentTokenSaleTransaction, PaypalCreditTransaction, and SepaSaleTransaction.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitPrimaryTransaction(contentType: "application/json", clientRequestId: string, apiKey: string, timestamp: number, primaryTransaction: PrimaryTransaction, messageSignature?: string | undefined, region?: string | undefined, options?: any): RequestArgs;
    /**
     * Use this to perform a void, postAuth or return secondary transaction. Partial postAuths and returns are allowed.
     * @summary Perform a secondary transaction.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {string} transactionId Gateway transaction identifier as returned in the parameter ipgTransactionId.
     * @param {SecondaryTransaction} secondaryTransaction Accepted request types: PostAuthTransaction, VoidTransaction, and ReturnTransaction.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {string} [storeId] An optional outlet ID for clients that support multiple stores in the same developer app.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitSecondaryTransaction(contentType: "application/json", clientRequestId: string, apiKey: string, timestamp: number, transactionId: string, secondaryTransaction: SecondaryTransaction, messageSignature?: string | undefined, region?: string | undefined, storeId?: string | undefined, options?: any): RequestArgs;
    /**
     * Use this query to get the current state of an existing transaction.
     * @summary Retrieve the state of a transaction.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {string} transactionId Gateway transaction identifier as returned in the parameter ipgTransactionId.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {string} [storeId] An optional outlet ID for clients that support multiple stores in the same developer app.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transactionInquiry(contentType: "application/json", clientRequestId: string, apiKey: string, timestamp: number, transactionId: string, messageSignature?: string | undefined, region?: string | undefined, storeId?: string | undefined, options?: any): RequestArgs;
};
/**
 * PaymentApi - functional programming interface
 * @export
 */
export declare const PaymentApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Use this to handle a 3DSecure redirect response or UnionPay authentication, updating the transaction and continuing processing.
     * @summary Update a 3DSecure or UnionPay payment and continue processing.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {string} transactionId Gateway transaction identifier as returned in the parameter ipgTransactionId.
     * @param {AuthenticationVerificationRequest} authenticationVerificationRequest Accepted request types: Secure3dAuthenticationVerificationRequest and UnionPayAuthenticationVerificationRequest.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    finalizeSecureTransaction(contentType: "application/json", clientRequestId: string, apiKey: string, timestamp: number, transactionId: string, authenticationVerificationRequest: AuthenticationVerificationRequest, messageSignature?: string | undefined, region?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<TransactionResponse>;
    /**
     * Use this to originate a financial transaction like a sale, preauthorization, or credit.
     * @summary Generate a primary transaction.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {PrimaryTransaction} primaryTransaction Accepted request types: AliPaySaleTransaction, ChinaPnRSaleTransaction, PaymentCardCreditTransaction, PaymentCardForcedTicketTransaction, PaymentCardSaleTransaction, PaymentCardPreAuthTransaction, PaymentCardPayerAuthTransaction, PaymentTokenCreditTransaction, PaymentTokenPreAuthTransaction, PaymentTokenSaleTransaction, PaypalCreditTransaction, and SepaSaleTransaction.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitPrimaryTransaction(contentType: "application/json", clientRequestId: string, apiKey: string, timestamp: number, primaryTransaction: PrimaryTransaction, messageSignature?: string | undefined, region?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<TransactionResponse>;
    /**
     * Use this to perform a void, postAuth or return secondary transaction. Partial postAuths and returns are allowed.
     * @summary Perform a secondary transaction.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {string} transactionId Gateway transaction identifier as returned in the parameter ipgTransactionId.
     * @param {SecondaryTransaction} secondaryTransaction Accepted request types: PostAuthTransaction, VoidTransaction, and ReturnTransaction.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {string} [storeId] An optional outlet ID for clients that support multiple stores in the same developer app.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitSecondaryTransaction(contentType: "application/json", clientRequestId: string, apiKey: string, timestamp: number, transactionId: string, secondaryTransaction: SecondaryTransaction, messageSignature?: string | undefined, region?: string | undefined, storeId?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<TransactionResponse>;
    /**
     * Use this query to get the current state of an existing transaction.
     * @summary Retrieve the state of a transaction.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {string} transactionId Gateway transaction identifier as returned in the parameter ipgTransactionId.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {string} [storeId] An optional outlet ID for clients that support multiple stores in the same developer app.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transactionInquiry(contentType: "application/json", clientRequestId: string, apiKey: string, timestamp: number, transactionId: string, messageSignature?: string | undefined, region?: string | undefined, storeId?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<TransactionResponse>;
};
/**
 * PaymentApi - factory interface
 * @export
 */
export declare const PaymentApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Use this to handle a 3DSecure redirect response or UnionPay authentication, updating the transaction and continuing processing.
     * @summary Update a 3DSecure or UnionPay payment and continue processing.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {string} transactionId Gateway transaction identifier as returned in the parameter ipgTransactionId.
     * @param {AuthenticationVerificationRequest} authenticationVerificationRequest Accepted request types: Secure3dAuthenticationVerificationRequest and UnionPayAuthenticationVerificationRequest.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    finalizeSecureTransaction(contentType: "application/json", clientRequestId: string, apiKey: string, timestamp: number, transactionId: string, authenticationVerificationRequest: AuthenticationVerificationRequest, messageSignature?: string | undefined, region?: string | undefined, options?: any): AxiosPromise<TransactionResponse>;
    /**
     * Use this to originate a financial transaction like a sale, preauthorization, or credit.
     * @summary Generate a primary transaction.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {PrimaryTransaction} primaryTransaction Accepted request types: AliPaySaleTransaction, ChinaPnRSaleTransaction, PaymentCardCreditTransaction, PaymentCardForcedTicketTransaction, PaymentCardSaleTransaction, PaymentCardPreAuthTransaction, PaymentCardPayerAuthTransaction, PaymentTokenCreditTransaction, PaymentTokenPreAuthTransaction, PaymentTokenSaleTransaction, PaypalCreditTransaction, and SepaSaleTransaction.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitPrimaryTransaction(contentType: "application/json", clientRequestId: string, apiKey: string, timestamp: number, primaryTransaction: PrimaryTransaction, messageSignature?: string | undefined, region?: string | undefined, options?: any): AxiosPromise<TransactionResponse>;
    /**
     * Use this to perform a void, postAuth or return secondary transaction. Partial postAuths and returns are allowed.
     * @summary Perform a secondary transaction.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {string} transactionId Gateway transaction identifier as returned in the parameter ipgTransactionId.
     * @param {SecondaryTransaction} secondaryTransaction Accepted request types: PostAuthTransaction, VoidTransaction, and ReturnTransaction.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {string} [storeId] An optional outlet ID for clients that support multiple stores in the same developer app.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitSecondaryTransaction(contentType: "application/json", clientRequestId: string, apiKey: string, timestamp: number, transactionId: string, secondaryTransaction: SecondaryTransaction, messageSignature?: string | undefined, region?: string | undefined, storeId?: string | undefined, options?: any): AxiosPromise<TransactionResponse>;
    /**
     * Use this query to get the current state of an existing transaction.
     * @summary Retrieve the state of a transaction.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {string} transactionId Gateway transaction identifier as returned in the parameter ipgTransactionId.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {string} [storeId] An optional outlet ID for clients that support multiple stores in the same developer app.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transactionInquiry(contentType: "application/json", clientRequestId: string, apiKey: string, timestamp: number, transactionId: string, messageSignature?: string | undefined, region?: string | undefined, storeId?: string | undefined, options?: any): AxiosPromise<TransactionResponse>;
};
/**
 * PaymentApi - interface
 * @export
 * @interface PaymentApi
 */
export interface PaymentApiInterface {
    /**
     * Use this to handle a 3DSecure redirect response or UnionPay authentication, updating the transaction and continuing processing.
     * @summary Update a 3DSecure or UnionPay payment and continue processing.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {string} transactionId Gateway transaction identifier as returned in the parameter ipgTransactionId.
     * @param {AuthenticationVerificationRequest} authenticationVerificationRequest Accepted request types: Secure3dAuthenticationVerificationRequest and UnionPayAuthenticationVerificationRequest.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApiInterface
     */
    finalizeSecureTransaction(contentType: 'application/json', clientRequestId: string, apiKey: string, timestamp: number, transactionId: string, authenticationVerificationRequest: AuthenticationVerificationRequest, messageSignature?: string, region?: string, options?: any): AxiosPromise<TransactionResponse>;
    /**
     * Use this to originate a financial transaction like a sale, preauthorization, or credit.
     * @summary Generate a primary transaction.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {PrimaryTransaction} primaryTransaction Accepted request types: AliPaySaleTransaction, ChinaPnRSaleTransaction, PaymentCardCreditTransaction, PaymentCardForcedTicketTransaction, PaymentCardSaleTransaction, PaymentCardPreAuthTransaction, PaymentCardPayerAuthTransaction, PaymentTokenCreditTransaction, PaymentTokenPreAuthTransaction, PaymentTokenSaleTransaction, PaypalCreditTransaction, and SepaSaleTransaction.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApiInterface
     */
    submitPrimaryTransaction(contentType: 'application/json', clientRequestId: string, apiKey: string, timestamp: number, primaryTransaction: PrimaryTransaction, messageSignature?: string, region?: string, options?: any): AxiosPromise<TransactionResponse>;
    /**
     * Use this to perform a void, postAuth or return secondary transaction. Partial postAuths and returns are allowed.
     * @summary Perform a secondary transaction.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {string} transactionId Gateway transaction identifier as returned in the parameter ipgTransactionId.
     * @param {SecondaryTransaction} secondaryTransaction Accepted request types: PostAuthTransaction, VoidTransaction, and ReturnTransaction.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {string} [storeId] An optional outlet ID for clients that support multiple stores in the same developer app.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApiInterface
     */
    submitSecondaryTransaction(contentType: 'application/json', clientRequestId: string, apiKey: string, timestamp: number, transactionId: string, secondaryTransaction: SecondaryTransaction, messageSignature?: string, region?: string, storeId?: string, options?: any): AxiosPromise<TransactionResponse>;
    /**
     * Use this query to get the current state of an existing transaction.
     * @summary Retrieve the state of a transaction.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {string} transactionId Gateway transaction identifier as returned in the parameter ipgTransactionId.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {string} [storeId] An optional outlet ID for clients that support multiple stores in the same developer app.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApiInterface
     */
    transactionInquiry(contentType: 'application/json', clientRequestId: string, apiKey: string, timestamp: number, transactionId: string, messageSignature?: string, region?: string, storeId?: string, options?: any): AxiosPromise<TransactionResponse>;
}
/**
 * PaymentApi - object-oriented interface
 * @export
 * @class PaymentApi
 * @extends {BaseAPI}
 */
export declare class PaymentApi extends BaseAPI implements PaymentApiInterface {
    /**
     * Use this to handle a 3DSecure redirect response or UnionPay authentication, updating the transaction and continuing processing.
     * @summary Update a 3DSecure or UnionPay payment and continue processing.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {string} transactionId Gateway transaction identifier as returned in the parameter ipgTransactionId.
     * @param {AuthenticationVerificationRequest} authenticationVerificationRequest Accepted request types: Secure3dAuthenticationVerificationRequest and UnionPayAuthenticationVerificationRequest.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    finalizeSecureTransaction(contentType: 'application/json', clientRequestId: string, apiKey: string, timestamp: number, transactionId: string, authenticationVerificationRequest: AuthenticationVerificationRequest, messageSignature?: string, region?: string, options?: any): AxiosPromise<TransactionResponse>;
    /**
     * Use this to originate a financial transaction like a sale, preauthorization, or credit.
     * @summary Generate a primary transaction.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {PrimaryTransaction} primaryTransaction Accepted request types: AliPaySaleTransaction, ChinaPnRSaleTransaction, PaymentCardCreditTransaction, PaymentCardForcedTicketTransaction, PaymentCardSaleTransaction, PaymentCardPreAuthTransaction, PaymentCardPayerAuthTransaction, PaymentTokenCreditTransaction, PaymentTokenPreAuthTransaction, PaymentTokenSaleTransaction, PaypalCreditTransaction, and SepaSaleTransaction.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    submitPrimaryTransaction(contentType: 'application/json', clientRequestId: string, apiKey: string, timestamp: number, primaryTransaction: PrimaryTransaction, messageSignature?: string, region?: string, options?: any): AxiosPromise<TransactionResponse>;
    /**
     * Use this to perform a void, postAuth or return secondary transaction. Partial postAuths and returns are allowed.
     * @summary Perform a secondary transaction.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {string} transactionId Gateway transaction identifier as returned in the parameter ipgTransactionId.
     * @param {SecondaryTransaction} secondaryTransaction Accepted request types: PostAuthTransaction, VoidTransaction, and ReturnTransaction.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {string} [storeId] An optional outlet ID for clients that support multiple stores in the same developer app.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    submitSecondaryTransaction(contentType: 'application/json', clientRequestId: string, apiKey: string, timestamp: number, transactionId: string, secondaryTransaction: SecondaryTransaction, messageSignature?: string, region?: string, storeId?: string, options?: any): AxiosPromise<TransactionResponse>;
    /**
     * Use this query to get the current state of an existing transaction.
     * @summary Retrieve the state of a transaction.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {string} transactionId Gateway transaction identifier as returned in the parameter ipgTransactionId.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {string} [storeId] An optional outlet ID for clients that support multiple stores in the same developer app.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    transactionInquiry(contentType: 'application/json', clientRequestId: string, apiKey: string, timestamp: number, transactionId: string, messageSignature?: string, region?: string, storeId?: string, options?: any): AxiosPromise<TransactionResponse>;
}
/**
 * PaymentSchedulesApi - axios parameter creator
 * @export
 */
export declare const PaymentSchedulesApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Use this to cancel an existing gateway payment schedule.
     * @summary Cancel a gateway payment schedule.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {string} orderId Gateway order identifier as returned in the parameter orderId.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {string} [storeId] An optional outlet ID for clients that support multiple stores in the same developer app.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelPaymentSchedule(contentType: "application/json", clientRequestId: string, apiKey: string, timestamp: number, orderId: string, messageSignature?: string | undefined, region?: string | undefined, storeId?: string | undefined, options?: any): RequestArgs;
    /**
     * Use this to create a gateway payment schedule.
     * @summary Create gateway payment schedule.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {PaymentSchedulesRequest} paymentSchedulesRequest Accepted request types: PaymentMethodPaymentSchedulesRequest and ReferencedOrderPaymentSchedulesRequest.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPaymentSchedule(contentType: "application/json", clientRequestId: string, apiKey: string, timestamp: number, paymentSchedulesRequest: PaymentSchedulesRequest, messageSignature?: string | undefined, region?: string | undefined, options?: any): RequestArgs;
    /**
     * Use this to view an existing gateway payment schedule.
     * @summary View a gateway payment schedule.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {string} orderId Gateway order identifier as returned in the parameter orderId.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {string} [storeId] An optional outlet ID for clients that support multiple stores in the same developer app.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    inquiryPaymentSchedule(contentType: "application/json", clientRequestId: string, apiKey: string, timestamp: number, orderId: string, messageSignature?: string | undefined, region?: string | undefined, storeId?: string | undefined, options?: any): RequestArgs;
    /**
     * Use this to update a gateway payment schedule.
     * @summary Update a gateway payment schedule.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {string} orderId Gateway order identifier as returned in the parameter orderId.
     * @param {PaymentSchedulesRequest} paymentSchedulesRequest Accepted request types: PaymentMethodPaymentSchedulesRequest and ReferencedOrderPaymentSchedulesRequest.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {string} [storeId] An optional outlet ID for clients that support multiple stores in the same developer app.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePaymentSchedule(contentType: "application/json", clientRequestId: string, apiKey: string, timestamp: number, orderId: string, paymentSchedulesRequest: PaymentSchedulesRequest, messageSignature?: string | undefined, region?: string | undefined, storeId?: string | undefined, options?: any): RequestArgs;
};
/**
 * PaymentSchedulesApi - functional programming interface
 * @export
 */
export declare const PaymentSchedulesApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Use this to cancel an existing gateway payment schedule.
     * @summary Cancel a gateway payment schedule.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {string} orderId Gateway order identifier as returned in the parameter orderId.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {string} [storeId] An optional outlet ID for clients that support multiple stores in the same developer app.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelPaymentSchedule(contentType: "application/json", clientRequestId: string, apiKey: string, timestamp: number, orderId: string, messageSignature?: string | undefined, region?: string | undefined, storeId?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<PaymentSchedulesResponse>;
    /**
     * Use this to create a gateway payment schedule.
     * @summary Create gateway payment schedule.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {PaymentSchedulesRequest} paymentSchedulesRequest Accepted request types: PaymentMethodPaymentSchedulesRequest and ReferencedOrderPaymentSchedulesRequest.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPaymentSchedule(contentType: "application/json", clientRequestId: string, apiKey: string, timestamp: number, paymentSchedulesRequest: PaymentSchedulesRequest, messageSignature?: string | undefined, region?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<PaymentSchedulesResponse>;
    /**
     * Use this to view an existing gateway payment schedule.
     * @summary View a gateway payment schedule.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {string} orderId Gateway order identifier as returned in the parameter orderId.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {string} [storeId] An optional outlet ID for clients that support multiple stores in the same developer app.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    inquiryPaymentSchedule(contentType: "application/json", clientRequestId: string, apiKey: string, timestamp: number, orderId: string, messageSignature?: string | undefined, region?: string | undefined, storeId?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<RecurringPaymentDetailsResponse>;
    /**
     * Use this to update a gateway payment schedule.
     * @summary Update a gateway payment schedule.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {string} orderId Gateway order identifier as returned in the parameter orderId.
     * @param {PaymentSchedulesRequest} paymentSchedulesRequest Accepted request types: PaymentMethodPaymentSchedulesRequest and ReferencedOrderPaymentSchedulesRequest.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {string} [storeId] An optional outlet ID for clients that support multiple stores in the same developer app.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePaymentSchedule(contentType: "application/json", clientRequestId: string, apiKey: string, timestamp: number, orderId: string, paymentSchedulesRequest: PaymentSchedulesRequest, messageSignature?: string | undefined, region?: string | undefined, storeId?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<PaymentSchedulesResponse>;
};
/**
 * PaymentSchedulesApi - factory interface
 * @export
 */
export declare const PaymentSchedulesApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Use this to cancel an existing gateway payment schedule.
     * @summary Cancel a gateway payment schedule.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {string} orderId Gateway order identifier as returned in the parameter orderId.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {string} [storeId] An optional outlet ID for clients that support multiple stores in the same developer app.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelPaymentSchedule(contentType: "application/json", clientRequestId: string, apiKey: string, timestamp: number, orderId: string, messageSignature?: string | undefined, region?: string | undefined, storeId?: string | undefined, options?: any): AxiosPromise<PaymentSchedulesResponse>;
    /**
     * Use this to create a gateway payment schedule.
     * @summary Create gateway payment schedule.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {PaymentSchedulesRequest} paymentSchedulesRequest Accepted request types: PaymentMethodPaymentSchedulesRequest and ReferencedOrderPaymentSchedulesRequest.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPaymentSchedule(contentType: "application/json", clientRequestId: string, apiKey: string, timestamp: number, paymentSchedulesRequest: PaymentSchedulesRequest, messageSignature?: string | undefined, region?: string | undefined, options?: any): AxiosPromise<PaymentSchedulesResponse>;
    /**
     * Use this to view an existing gateway payment schedule.
     * @summary View a gateway payment schedule.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {string} orderId Gateway order identifier as returned in the parameter orderId.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {string} [storeId] An optional outlet ID for clients that support multiple stores in the same developer app.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    inquiryPaymentSchedule(contentType: "application/json", clientRequestId: string, apiKey: string, timestamp: number, orderId: string, messageSignature?: string | undefined, region?: string | undefined, storeId?: string | undefined, options?: any): AxiosPromise<RecurringPaymentDetailsResponse>;
    /**
     * Use this to update a gateway payment schedule.
     * @summary Update a gateway payment schedule.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {string} orderId Gateway order identifier as returned in the parameter orderId.
     * @param {PaymentSchedulesRequest} paymentSchedulesRequest Accepted request types: PaymentMethodPaymentSchedulesRequest and ReferencedOrderPaymentSchedulesRequest.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {string} [storeId] An optional outlet ID for clients that support multiple stores in the same developer app.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePaymentSchedule(contentType: "application/json", clientRequestId: string, apiKey: string, timestamp: number, orderId: string, paymentSchedulesRequest: PaymentSchedulesRequest, messageSignature?: string | undefined, region?: string | undefined, storeId?: string | undefined, options?: any): AxiosPromise<PaymentSchedulesResponse>;
};
/**
 * PaymentSchedulesApi - interface
 * @export
 * @interface PaymentSchedulesApi
 */
export interface PaymentSchedulesApiInterface {
    /**
     * Use this to cancel an existing gateway payment schedule.
     * @summary Cancel a gateway payment schedule.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {string} orderId Gateway order identifier as returned in the parameter orderId.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {string} [storeId] An optional outlet ID for clients that support multiple stores in the same developer app.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentSchedulesApiInterface
     */
    cancelPaymentSchedule(contentType: 'application/json', clientRequestId: string, apiKey: string, timestamp: number, orderId: string, messageSignature?: string, region?: string, storeId?: string, options?: any): AxiosPromise<PaymentSchedulesResponse>;
    /**
     * Use this to create a gateway payment schedule.
     * @summary Create gateway payment schedule.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {PaymentSchedulesRequest} paymentSchedulesRequest Accepted request types: PaymentMethodPaymentSchedulesRequest and ReferencedOrderPaymentSchedulesRequest.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentSchedulesApiInterface
     */
    createPaymentSchedule(contentType: 'application/json', clientRequestId: string, apiKey: string, timestamp: number, paymentSchedulesRequest: PaymentSchedulesRequest, messageSignature?: string, region?: string, options?: any): AxiosPromise<PaymentSchedulesResponse>;
    /**
     * Use this to view an existing gateway payment schedule.
     * @summary View a gateway payment schedule.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {string} orderId Gateway order identifier as returned in the parameter orderId.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {string} [storeId] An optional outlet ID for clients that support multiple stores in the same developer app.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentSchedulesApiInterface
     */
    inquiryPaymentSchedule(contentType: 'application/json', clientRequestId: string, apiKey: string, timestamp: number, orderId: string, messageSignature?: string, region?: string, storeId?: string, options?: any): AxiosPromise<RecurringPaymentDetailsResponse>;
    /**
     * Use this to update a gateway payment schedule.
     * @summary Update a gateway payment schedule.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {string} orderId Gateway order identifier as returned in the parameter orderId.
     * @param {PaymentSchedulesRequest} paymentSchedulesRequest Accepted request types: PaymentMethodPaymentSchedulesRequest and ReferencedOrderPaymentSchedulesRequest.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {string} [storeId] An optional outlet ID for clients that support multiple stores in the same developer app.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentSchedulesApiInterface
     */
    updatePaymentSchedule(contentType: 'application/json', clientRequestId: string, apiKey: string, timestamp: number, orderId: string, paymentSchedulesRequest: PaymentSchedulesRequest, messageSignature?: string, region?: string, storeId?: string, options?: any): AxiosPromise<PaymentSchedulesResponse>;
}
/**
 * PaymentSchedulesApi - object-oriented interface
 * @export
 * @class PaymentSchedulesApi
 * @extends {BaseAPI}
 */
export declare class PaymentSchedulesApi extends BaseAPI implements PaymentSchedulesApiInterface {
    /**
     * Use this to cancel an existing gateway payment schedule.
     * @summary Cancel a gateway payment schedule.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {string} orderId Gateway order identifier as returned in the parameter orderId.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {string} [storeId] An optional outlet ID for clients that support multiple stores in the same developer app.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentSchedulesApi
     */
    cancelPaymentSchedule(contentType: 'application/json', clientRequestId: string, apiKey: string, timestamp: number, orderId: string, messageSignature?: string, region?: string, storeId?: string, options?: any): AxiosPromise<PaymentSchedulesResponse>;
    /**
     * Use this to create a gateway payment schedule.
     * @summary Create gateway payment schedule.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {PaymentSchedulesRequest} paymentSchedulesRequest Accepted request types: PaymentMethodPaymentSchedulesRequest and ReferencedOrderPaymentSchedulesRequest.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentSchedulesApi
     */
    createPaymentSchedule(contentType: 'application/json', clientRequestId: string, apiKey: string, timestamp: number, paymentSchedulesRequest: PaymentSchedulesRequest, messageSignature?: string, region?: string, options?: any): AxiosPromise<PaymentSchedulesResponse>;
    /**
     * Use this to view an existing gateway payment schedule.
     * @summary View a gateway payment schedule.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {string} orderId Gateway order identifier as returned in the parameter orderId.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {string} [storeId] An optional outlet ID for clients that support multiple stores in the same developer app.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentSchedulesApi
     */
    inquiryPaymentSchedule(contentType: 'application/json', clientRequestId: string, apiKey: string, timestamp: number, orderId: string, messageSignature?: string, region?: string, storeId?: string, options?: any): AxiosPromise<RecurringPaymentDetailsResponse>;
    /**
     * Use this to update a gateway payment schedule.
     * @summary Update a gateway payment schedule.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {string} orderId Gateway order identifier as returned in the parameter orderId.
     * @param {PaymentSchedulesRequest} paymentSchedulesRequest Accepted request types: PaymentMethodPaymentSchedulesRequest and ReferencedOrderPaymentSchedulesRequest.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {string} [storeId] An optional outlet ID for clients that support multiple stores in the same developer app.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentSchedulesApi
     */
    updatePaymentSchedule(contentType: 'application/json', clientRequestId: string, apiKey: string, timestamp: number, orderId: string, paymentSchedulesRequest: PaymentSchedulesRequest, messageSignature?: string, region?: string, storeId?: string, options?: any): AxiosPromise<PaymentSchedulesResponse>;
}
/**
 * PaymentTokenApi - axios parameter creator
 * @export
 */
export declare const PaymentTokenApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Use this to create a payment token from a payment card.
     * @summary Create a payment token from a payment card.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {PaymentTokenizationRequest} paymentTokenizationRequest Accepted request types: PaymentCardPaymentTokenizationRequest and ReferencedOrderPaymentTokenizationRequest.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [authorization] The access token previously generated with the access-tokens call. Use the format &#39;Bearer {access-token}&#39;.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPaymentToken(contentType: "application/json", clientRequestId: string, apiKey: string, timestamp: number, paymentTokenizationRequest: PaymentTokenizationRequest, messageSignature?: string | undefined, authorization?: string | undefined, region?: string | undefined, options?: any): RequestArgs;
    /**
     * Use this to delete a payment token.
     * @summary Delete a payment token.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {string} tokenId Identifies a payment token.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [authorization] The access token previously generated with the access-tokens call. Use the format &#39;Bearer {access-token}&#39;.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {string} [storeId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePaymentToken(contentType: "application/json", clientRequestId: string, apiKey: string, timestamp: number, tokenId: string, messageSignature?: string | undefined, authorization?: string | undefined, region?: string | undefined, storeId?: string | undefined, options?: any): RequestArgs;
};
/**
 * PaymentTokenApi - functional programming interface
 * @export
 */
export declare const PaymentTokenApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Use this to create a payment token from a payment card.
     * @summary Create a payment token from a payment card.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {PaymentTokenizationRequest} paymentTokenizationRequest Accepted request types: PaymentCardPaymentTokenizationRequest and ReferencedOrderPaymentTokenizationRequest.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [authorization] The access token previously generated with the access-tokens call. Use the format &#39;Bearer {access-token}&#39;.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPaymentToken(contentType: "application/json", clientRequestId: string, apiKey: string, timestamp: number, paymentTokenizationRequest: PaymentTokenizationRequest, messageSignature?: string | undefined, authorization?: string | undefined, region?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<PaymentTokenizationResponse>;
    /**
     * Use this to delete a payment token.
     * @summary Delete a payment token.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {string} tokenId Identifies a payment token.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [authorization] The access token previously generated with the access-tokens call. Use the format &#39;Bearer {access-token}&#39;.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {string} [storeId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePaymentToken(contentType: "application/json", clientRequestId: string, apiKey: string, timestamp: number, tokenId: string, messageSignature?: string | undefined, authorization?: string | undefined, region?: string | undefined, storeId?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<PaymentTokenizationResponse>;
};
/**
 * PaymentTokenApi - factory interface
 * @export
 */
export declare const PaymentTokenApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Use this to create a payment token from a payment card.
     * @summary Create a payment token from a payment card.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {PaymentTokenizationRequest} paymentTokenizationRequest Accepted request types: PaymentCardPaymentTokenizationRequest and ReferencedOrderPaymentTokenizationRequest.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [authorization] The access token previously generated with the access-tokens call. Use the format &#39;Bearer {access-token}&#39;.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPaymentToken(contentType: "application/json", clientRequestId: string, apiKey: string, timestamp: number, paymentTokenizationRequest: PaymentTokenizationRequest, messageSignature?: string | undefined, authorization?: string | undefined, region?: string | undefined, options?: any): AxiosPromise<PaymentTokenizationResponse>;
    /**
     * Use this to delete a payment token.
     * @summary Delete a payment token.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {string} tokenId Identifies a payment token.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [authorization] The access token previously generated with the access-tokens call. Use the format &#39;Bearer {access-token}&#39;.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {string} [storeId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePaymentToken(contentType: "application/json", clientRequestId: string, apiKey: string, timestamp: number, tokenId: string, messageSignature?: string | undefined, authorization?: string | undefined, region?: string | undefined, storeId?: string | undefined, options?: any): AxiosPromise<PaymentTokenizationResponse>;
};
/**
 * PaymentTokenApi - interface
 * @export
 * @interface PaymentTokenApi
 */
export interface PaymentTokenApiInterface {
    /**
     * Use this to create a payment token from a payment card.
     * @summary Create a payment token from a payment card.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {PaymentTokenizationRequest} paymentTokenizationRequest Accepted request types: PaymentCardPaymentTokenizationRequest and ReferencedOrderPaymentTokenizationRequest.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [authorization] The access token previously generated with the access-tokens call. Use the format &#39;Bearer {access-token}&#39;.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentTokenApiInterface
     */
    createPaymentToken(contentType: 'application/json', clientRequestId: string, apiKey: string, timestamp: number, paymentTokenizationRequest: PaymentTokenizationRequest, messageSignature?: string, authorization?: string, region?: string, options?: any): AxiosPromise<PaymentTokenizationResponse>;
    /**
     * Use this to delete a payment token.
     * @summary Delete a payment token.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {string} tokenId Identifies a payment token.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [authorization] The access token previously generated with the access-tokens call. Use the format &#39;Bearer {access-token}&#39;.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {string} [storeId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentTokenApiInterface
     */
    deletePaymentToken(contentType: 'application/json', clientRequestId: string, apiKey: string, timestamp: number, tokenId: string, messageSignature?: string, authorization?: string, region?: string, storeId?: string, options?: any): AxiosPromise<PaymentTokenizationResponse>;
}
/**
 * PaymentTokenApi - object-oriented interface
 * @export
 * @class PaymentTokenApi
 * @extends {BaseAPI}
 */
export declare class PaymentTokenApi extends BaseAPI implements PaymentTokenApiInterface {
    /**
     * Use this to create a payment token from a payment card.
     * @summary Create a payment token from a payment card.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {PaymentTokenizationRequest} paymentTokenizationRequest Accepted request types: PaymentCardPaymentTokenizationRequest and ReferencedOrderPaymentTokenizationRequest.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [authorization] The access token previously generated with the access-tokens call. Use the format &#39;Bearer {access-token}&#39;.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentTokenApi
     */
    createPaymentToken(contentType: 'application/json', clientRequestId: string, apiKey: string, timestamp: number, paymentTokenizationRequest: PaymentTokenizationRequest, messageSignature?: string, authorization?: string, region?: string, options?: any): AxiosPromise<PaymentTokenizationResponse>;
    /**
     * Use this to delete a payment token.
     * @summary Delete a payment token.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {string} tokenId Identifies a payment token.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [authorization] The access token previously generated with the access-tokens call. Use the format &#39;Bearer {access-token}&#39;.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {string} [storeId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentTokenApi
     */
    deletePaymentToken(contentType: 'application/json', clientRequestId: string, apiKey: string, timestamp: number, tokenId: string, messageSignature?: string, authorization?: string, region?: string, storeId?: string, options?: any): AxiosPromise<PaymentTokenizationResponse>;
}
/**
 * PaymentURLApi - axios parameter creator
 * @export
 */
export declare const PaymentURLApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Use this to generate an embedding payment link.
     * @summary Create a payment URL.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {PaymentUrlRequest} paymentUrlRequest Accepted request type: PaymentUrlRequest.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPaymentUrl(contentType: "application/json", clientRequestId: string, apiKey: string, timestamp: number, paymentUrlRequest: PaymentUrlRequest, messageSignature?: string | undefined, region?: string | undefined, options?: any): RequestArgs;
};
/**
 * PaymentURLApi - functional programming interface
 * @export
 */
export declare const PaymentURLApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Use this to generate an embedding payment link.
     * @summary Create a payment URL.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {PaymentUrlRequest} paymentUrlRequest Accepted request type: PaymentUrlRequest.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPaymentUrl(contentType: "application/json", clientRequestId: string, apiKey: string, timestamp: number, paymentUrlRequest: PaymentUrlRequest, messageSignature?: string | undefined, region?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<PaymentUrlResponse>;
};
/**
 * PaymentURLApi - factory interface
 * @export
 */
export declare const PaymentURLApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Use this to generate an embedding payment link.
     * @summary Create a payment URL.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {PaymentUrlRequest} paymentUrlRequest Accepted request type: PaymentUrlRequest.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPaymentUrl(contentType: "application/json", clientRequestId: string, apiKey: string, timestamp: number, paymentUrlRequest: PaymentUrlRequest, messageSignature?: string | undefined, region?: string | undefined, options?: any): AxiosPromise<PaymentUrlResponse>;
};
/**
 * PaymentURLApi - interface
 * @export
 * @interface PaymentURLApi
 */
export interface PaymentURLApiInterface {
    /**
     * Use this to generate an embedding payment link.
     * @summary Create a payment URL.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {PaymentUrlRequest} paymentUrlRequest Accepted request type: PaymentUrlRequest.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentURLApiInterface
     */
    createPaymentUrl(contentType: 'application/json', clientRequestId: string, apiKey: string, timestamp: number, paymentUrlRequest: PaymentUrlRequest, messageSignature?: string, region?: string, options?: any): AxiosPromise<PaymentUrlResponse>;
}
/**
 * PaymentURLApi - object-oriented interface
 * @export
 * @class PaymentURLApi
 * @extends {BaseAPI}
 */
export declare class PaymentURLApi extends BaseAPI implements PaymentURLApiInterface {
    /**
     * Use this to generate an embedding payment link.
     * @summary Create a payment URL.
     * @param {'application/json'} contentType Content type.
     * @param {string} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {string} apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
     * @param {number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {PaymentUrlRequest} paymentUrlRequest Accepted request type: PaymentUrlRequest.
     * @param {string} [messageSignature] Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {string} [region] Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentURLApi
     */
    createPaymentUrl(contentType: 'application/json', clientRequestId: string, apiKey: string, timestamp: number, paymentUrlRequest: PaymentUrlRequest, messageSignature?: string, region?: string, options?: any): AxiosPromise<PaymentUrlResponse>;
}
