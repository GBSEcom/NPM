/**
 * Payment Gateway API Specification
 * Payment Gateway API for payment processing. 
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: unset
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ErrorResponse', 'model/PrimaryTransaction', 'model/SecondaryTransaction', 'model/TransactionResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ErrorResponse'), require('../model/PrimaryTransaction'), require('../model/SecondaryTransaction'), require('../model/TransactionResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.FirstApiSdk) {
      root.FirstApiSdk = {};
    }
    root.FirstApiSdk.PaymentApi = factory(root.FirstApiSdk.ApiClient, root.FirstApiSdk.ErrorResponse, root.FirstApiSdk.PrimaryTransaction, root.FirstApiSdk.SecondaryTransaction, root.FirstApiSdk.TransactionResponse);
  }
}(this, function(ApiClient, ErrorResponse, PrimaryTransaction, SecondaryTransaction, TransactionResponse) {
  'use strict';

  /**
   * Payment service.
   * @module api/PaymentApi
   * @version 6.3.0
   */

  /**
   * Constructs a new PaymentApi. 
   * @alias module:api/PaymentApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Use this to capture/complete a transaction. Partial postauths are allowed.
     * This can be used for postauth and partial postauths.
     * @param {module:model/String} contentType content type
     * @param {String} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {String} apiKey 
     * @param {Number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {String} messageSignature Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256  algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {String} transactionId Gateway transaction identifier as returned in the parameter ipgTransactionId
     * @param {module:model/SecondaryTransaction} payload 
     * @param {Object} opts Optional parameters
     * @param {String} opts.storeId an optional outlet id for clients that support multiple store in the same developer app
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TransactionResponse} and HTTP response
     */
    this.performPaymentPostAuthorisationWithHttpInfo = function(contentType, clientRequestId, apiKey, timestamp, messageSignature, transactionId, payload, opts) {
      opts = opts || {};
      var postBody = payload;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling performPaymentPostAuthorisation");
      }

      // verify the required parameter 'clientRequestId' is set
      if (clientRequestId === undefined || clientRequestId === null) {
        throw new Error("Missing the required parameter 'clientRequestId' when calling performPaymentPostAuthorisation");
      }

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling performPaymentPostAuthorisation");
      }

      // verify the required parameter 'timestamp' is set
      if (timestamp === undefined || timestamp === null) {
        throw new Error("Missing the required parameter 'timestamp' when calling performPaymentPostAuthorisation");
      }

      // verify the required parameter 'messageSignature' is set
      if (messageSignature === undefined || messageSignature === null) {
        throw new Error("Missing the required parameter 'messageSignature' when calling performPaymentPostAuthorisation");
      }

      // verify the required parameter 'transactionId' is set
      if (transactionId === undefined || transactionId === null) {
        throw new Error("Missing the required parameter 'transactionId' when calling performPaymentPostAuthorisation");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling performPaymentPostAuthorisation");
      }


      var pathParams = {
        'transaction-id': transactionId
      };
      var queryParams = {
        'storeId': opts['storeId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'Client-Request-Id': clientRequestId,
        'Api-Key': apiKey,
        'Timestamp': timestamp,
        'Message-Signature': messageSignature
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TransactionResponse;

      return this.apiClient.callApi(
        '/v1/payments/{transaction-id}/postauth', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Use this to capture/complete a transaction. Partial postauths are allowed.
     * This can be used for postauth and partial postauths.
     * @param {module:model/String} contentType content type
     * @param {String} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {String} apiKey 
     * @param {Number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {String} messageSignature Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256  algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {String} transactionId Gateway transaction identifier as returned in the parameter ipgTransactionId
     * @param {module:model/SecondaryTransaction} payload 
     * @param {Object} opts Optional parameters
     * @param {String} opts.storeId an optional outlet id for clients that support multiple store in the same developer app
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TransactionResponse}
     */
    this.performPaymentPostAuthorisation = function(contentType, clientRequestId, apiKey, timestamp, messageSignature, transactionId, payload, opts) {
      return this.performPaymentPostAuthorisationWithHttpInfo(contentType, clientRequestId, apiKey, timestamp, messageSignature, transactionId, payload, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Generate a primary transaction
     * Use this to originate a financial transaction, like a sale, preauthorization, or credit.
     * @param {module:model/String} contentType content type
     * @param {String} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {String} apiKey 
     * @param {Number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {String} messageSignature Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256  algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {module:model/PrimaryTransaction} payload Primary Transaction request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TransactionResponse} and HTTP response
     */
    this.primaryPaymentTransactionWithHttpInfo = function(contentType, clientRequestId, apiKey, timestamp, messageSignature, payload) {
      var postBody = payload;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling primaryPaymentTransaction");
      }

      // verify the required parameter 'clientRequestId' is set
      if (clientRequestId === undefined || clientRequestId === null) {
        throw new Error("Missing the required parameter 'clientRequestId' when calling primaryPaymentTransaction");
      }

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling primaryPaymentTransaction");
      }

      // verify the required parameter 'timestamp' is set
      if (timestamp === undefined || timestamp === null) {
        throw new Error("Missing the required parameter 'timestamp' when calling primaryPaymentTransaction");
      }

      // verify the required parameter 'messageSignature' is set
      if (messageSignature === undefined || messageSignature === null) {
        throw new Error("Missing the required parameter 'messageSignature' when calling primaryPaymentTransaction");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling primaryPaymentTransaction");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'Client-Request-Id': clientRequestId,
        'Api-Key': apiKey,
        'Timestamp': timestamp,
        'Message-Signature': messageSignature
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TransactionResponse;

      return this.apiClient.callApi(
        '/v1/payments', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Generate a primary transaction
     * Use this to originate a financial transaction, like a sale, preauthorization, or credit.
     * @param {module:model/String} contentType content type
     * @param {String} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {String} apiKey 
     * @param {Number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {String} messageSignature Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256  algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {module:model/PrimaryTransaction} payload Primary Transaction request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TransactionResponse}
     */
    this.primaryPaymentTransaction = function(contentType, clientRequestId, apiKey, timestamp, messageSignature, payload) {
      return this.primaryPaymentTransactionWithHttpInfo(contentType, clientRequestId, apiKey, timestamp, messageSignature, payload)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Return/refund a transaction.
     * Use this to return/refund an existing transaction.  Partial returns are allowed.
     * @param {module:model/String} contentType content type
     * @param {String} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {String} apiKey 
     * @param {Number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {String} messageSignature Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256  algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {String} transactionId Gateway transaction identifier as returned in the parameter ipgTransactionId
     * @param {module:model/SecondaryTransaction} payload 
     * @param {Object} opts Optional parameters
     * @param {String} opts.storeId an optional outlet id for clients that support multiple store in the same developer app
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TransactionResponse} and HTTP response
     */
    this.returnTransactionWithHttpInfo = function(contentType, clientRequestId, apiKey, timestamp, messageSignature, transactionId, payload, opts) {
      opts = opts || {};
      var postBody = payload;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling returnTransaction");
      }

      // verify the required parameter 'clientRequestId' is set
      if (clientRequestId === undefined || clientRequestId === null) {
        throw new Error("Missing the required parameter 'clientRequestId' when calling returnTransaction");
      }

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling returnTransaction");
      }

      // verify the required parameter 'timestamp' is set
      if (timestamp === undefined || timestamp === null) {
        throw new Error("Missing the required parameter 'timestamp' when calling returnTransaction");
      }

      // verify the required parameter 'messageSignature' is set
      if (messageSignature === undefined || messageSignature === null) {
        throw new Error("Missing the required parameter 'messageSignature' when calling returnTransaction");
      }

      // verify the required parameter 'transactionId' is set
      if (transactionId === undefined || transactionId === null) {
        throw new Error("Missing the required parameter 'transactionId' when calling returnTransaction");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling returnTransaction");
      }


      var pathParams = {
        'transaction-id': transactionId
      };
      var queryParams = {
        'storeId': opts['storeId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'Client-Request-Id': clientRequestId,
        'Api-Key': apiKey,
        'Timestamp': timestamp,
        'Message-Signature': messageSignature
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TransactionResponse;

      return this.apiClient.callApi(
        '/v1/payments/{transaction-id}/return', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Return/refund a transaction.
     * Use this to return/refund an existing transaction.  Partial returns are allowed.
     * @param {module:model/String} contentType content type
     * @param {String} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {String} apiKey 
     * @param {Number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {String} messageSignature Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256  algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {String} transactionId Gateway transaction identifier as returned in the parameter ipgTransactionId
     * @param {module:model/SecondaryTransaction} payload 
     * @param {Object} opts Optional parameters
     * @param {String} opts.storeId an optional outlet id for clients that support multiple store in the same developer app
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TransactionResponse}
     */
    this.returnTransaction = function(contentType, clientRequestId, apiKey, timestamp, messageSignature, transactionId, payload, opts) {
      return this.returnTransactionWithHttpInfo(contentType, clientRequestId, apiKey, timestamp, messageSignature, transactionId, payload, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve the state of a transaction
     * Use this query to get the current state of an existing transaction.
     * @param {module:model/String} contentType content type
     * @param {String} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {String} apiKey 
     * @param {Number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {String} messageSignature Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256  algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {String} transactionId Gateway transaction identifier as returned in the parameter ipgTransactionId
     * @param {Object} opts Optional parameters
     * @param {String} opts.storeId an optional outlet id for clients that support multiple store in the same developer app
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TransactionResponse} and HTTP response
     */
    this.transactionInquiryWithHttpInfo = function(contentType, clientRequestId, apiKey, timestamp, messageSignature, transactionId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling transactionInquiry");
      }

      // verify the required parameter 'clientRequestId' is set
      if (clientRequestId === undefined || clientRequestId === null) {
        throw new Error("Missing the required parameter 'clientRequestId' when calling transactionInquiry");
      }

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling transactionInquiry");
      }

      // verify the required parameter 'timestamp' is set
      if (timestamp === undefined || timestamp === null) {
        throw new Error("Missing the required parameter 'timestamp' when calling transactionInquiry");
      }

      // verify the required parameter 'messageSignature' is set
      if (messageSignature === undefined || messageSignature === null) {
        throw new Error("Missing the required parameter 'messageSignature' when calling transactionInquiry");
      }

      // verify the required parameter 'transactionId' is set
      if (transactionId === undefined || transactionId === null) {
        throw new Error("Missing the required parameter 'transactionId' when calling transactionInquiry");
      }


      var pathParams = {
        'transaction-id': transactionId
      };
      var queryParams = {
        'storeId': opts['storeId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'Client-Request-Id': clientRequestId,
        'Api-Key': apiKey,
        'Timestamp': timestamp,
        'Message-Signature': messageSignature
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TransactionResponse;

      return this.apiClient.callApi(
        '/v1/payments/{transaction-id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve the state of a transaction
     * Use this query to get the current state of an existing transaction.
     * @param {module:model/String} contentType content type
     * @param {String} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {String} apiKey 
     * @param {Number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {String} messageSignature Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256  algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {String} transactionId Gateway transaction identifier as returned in the parameter ipgTransactionId
     * @param {Object} opts Optional parameters
     * @param {String} opts.storeId an optional outlet id for clients that support multiple store in the same developer app
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TransactionResponse}
     */
    this.transactionInquiry = function(contentType, clientRequestId, apiKey, timestamp, messageSignature, transactionId, opts) {
      return this.transactionInquiryWithHttpInfo(contentType, clientRequestId, apiKey, timestamp, messageSignature, transactionId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Reverse a previous action on an existing transaction
     * Use this to reverse a postauth/completion, credit, preauth, or sale.
     * @param {module:model/String} contentType content type
     * @param {String} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {String} apiKey 
     * @param {Number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {String} messageSignature Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256  algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {String} transactionId Gateway transaction identifier as returned in the parameter ipgTransactionId
     * @param {Object} opts Optional parameters
     * @param {String} opts.storeId an optional outlet id for clients that support multiple store in the same developer app
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TransactionResponse} and HTTP response
     */
    this.voidTransactionWithHttpInfo = function(contentType, clientRequestId, apiKey, timestamp, messageSignature, transactionId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling voidTransaction");
      }

      // verify the required parameter 'clientRequestId' is set
      if (clientRequestId === undefined || clientRequestId === null) {
        throw new Error("Missing the required parameter 'clientRequestId' when calling voidTransaction");
      }

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling voidTransaction");
      }

      // verify the required parameter 'timestamp' is set
      if (timestamp === undefined || timestamp === null) {
        throw new Error("Missing the required parameter 'timestamp' when calling voidTransaction");
      }

      // verify the required parameter 'messageSignature' is set
      if (messageSignature === undefined || messageSignature === null) {
        throw new Error("Missing the required parameter 'messageSignature' when calling voidTransaction");
      }

      // verify the required parameter 'transactionId' is set
      if (transactionId === undefined || transactionId === null) {
        throw new Error("Missing the required parameter 'transactionId' when calling voidTransaction");
      }


      var pathParams = {
        'transaction-id': transactionId
      };
      var queryParams = {
        'storeId': opts['storeId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'Client-Request-Id': clientRequestId,
        'Api-Key': apiKey,
        'Timestamp': timestamp,
        'Message-Signature': messageSignature
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TransactionResponse;

      return this.apiClient.callApi(
        '/v1/payments/{transaction-id}/void', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Reverse a previous action on an existing transaction
     * Use this to reverse a postauth/completion, credit, preauth, or sale.
     * @param {module:model/String} contentType content type
     * @param {String} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {String} apiKey 
     * @param {Number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {String} messageSignature Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256  algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {String} transactionId Gateway transaction identifier as returned in the parameter ipgTransactionId
     * @param {Object} opts Optional parameters
     * @param {String} opts.storeId an optional outlet id for clients that support multiple store in the same developer app
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TransactionResponse}
     */
    this.voidTransaction = function(contentType, clientRequestId, apiKey, timestamp, messageSignature, transactionId, opts) {
      return this.voidTransactionWithHttpInfo(contentType, clientRequestId, apiKey, timestamp, messageSignature, transactionId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
