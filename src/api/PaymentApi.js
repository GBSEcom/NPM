/**
 * Payment Gateway API Specification
 * Payment Gateway API for payment processing. 
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import PrimaryTransaction from '../model/PrimaryTransaction';
import SecondaryTransaction from '../model/SecondaryTransaction';
import TransactionResponse from '../model/TransactionResponse';

/**
* Payment service.
* @module api/PaymentApi
* @version 6.3.0
*/
export default class PaymentApi {

    /**
    * Constructs a new PaymentApi. 
    * @alias module:api/PaymentApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Use this to capture/complete a transaction. Partial postauths are allowed.
     * This can be used for postauth and partial postauths.
     * @param {module:model/String} contentType content type
     * @param {String} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {String} apiKey 
     * @param {Number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {String} messageSignature Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256  algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {String} transactionId Gateway transaction identifier as returned in the parameter ipgTransactionId
     * @param {module:model/SecondaryTransaction} payload 
     * @param {Object} opts Optional parameters
     * @param {String} opts.storeId an optional outlet id for clients that support multiple store in the same developer app
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TransactionResponse} and HTTP response
     */
    performPaymentPostAuthorisationWithHttpInfo(contentType, clientRequestId, apiKey, timestamp, messageSignature, transactionId, payload, opts) {
      opts = opts || {};
      let postBody = payload;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling performPaymentPostAuthorisation");
      }

      // verify the required parameter 'clientRequestId' is set
      if (clientRequestId === undefined || clientRequestId === null) {
        throw new Error("Missing the required parameter 'clientRequestId' when calling performPaymentPostAuthorisation");
      }

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling performPaymentPostAuthorisation");
      }

      // verify the required parameter 'timestamp' is set
      if (timestamp === undefined || timestamp === null) {
        throw new Error("Missing the required parameter 'timestamp' when calling performPaymentPostAuthorisation");
      }

      // verify the required parameter 'messageSignature' is set
      if (messageSignature === undefined || messageSignature === null) {
        throw new Error("Missing the required parameter 'messageSignature' when calling performPaymentPostAuthorisation");
      }

      // verify the required parameter 'transactionId' is set
      if (transactionId === undefined || transactionId === null) {
        throw new Error("Missing the required parameter 'transactionId' when calling performPaymentPostAuthorisation");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling performPaymentPostAuthorisation");
      }


      let pathParams = {
        'transaction-id': transactionId
      };
      let queryParams = {
        'storeId': opts['storeId']
      };
      let headerParams = {
        'Content-Type': contentType,
        'Client-Request-Id': clientRequestId,
        'Api-Key': apiKey,
        'Timestamp': timestamp,
        'Message-Signature': messageSignature
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransactionResponse;

      return this.apiClient.callApi(
        '/v1/payments/{transaction-id}/postauth', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Use this to capture/complete a transaction. Partial postauths are allowed.
     * This can be used for postauth and partial postauths.
     * @param {module:model/String} contentType content type
     * @param {String} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {String} apiKey 
     * @param {Number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {String} messageSignature Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256  algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {String} transactionId Gateway transaction identifier as returned in the parameter ipgTransactionId
     * @param {module:model/SecondaryTransaction} payload 
     * @param {Object} opts Optional parameters
     * @param {String} opts.storeId an optional outlet id for clients that support multiple store in the same developer app
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TransactionResponse}
     */
    performPaymentPostAuthorisation(contentType, clientRequestId, apiKey, timestamp, messageSignature, transactionId, payload, opts) {
      return this.performPaymentPostAuthorisationWithHttpInfo(contentType, clientRequestId, apiKey, timestamp, messageSignature, transactionId, payload, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Generate a primary transaction
     * Use this to originate a financial transaction, like a sale, preauthorization, or credit.
     * @param {module:model/String} contentType content type
     * @param {String} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {String} apiKey 
     * @param {Number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {String} messageSignature Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256  algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {module:model/PrimaryTransaction} payload Primary Transaction request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TransactionResponse} and HTTP response
     */
    primaryPaymentTransactionWithHttpInfo(contentType, clientRequestId, apiKey, timestamp, messageSignature, payload) {
      let postBody = payload;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling primaryPaymentTransaction");
      }

      // verify the required parameter 'clientRequestId' is set
      if (clientRequestId === undefined || clientRequestId === null) {
        throw new Error("Missing the required parameter 'clientRequestId' when calling primaryPaymentTransaction");
      }

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling primaryPaymentTransaction");
      }

      // verify the required parameter 'timestamp' is set
      if (timestamp === undefined || timestamp === null) {
        throw new Error("Missing the required parameter 'timestamp' when calling primaryPaymentTransaction");
      }

      // verify the required parameter 'messageSignature' is set
      if (messageSignature === undefined || messageSignature === null) {
        throw new Error("Missing the required parameter 'messageSignature' when calling primaryPaymentTransaction");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling primaryPaymentTransaction");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Client-Request-Id': clientRequestId,
        'Api-Key': apiKey,
        'Timestamp': timestamp,
        'Message-Signature': messageSignature
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransactionResponse;

      return this.apiClient.callApi(
        '/v1/payments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Generate a primary transaction
     * Use this to originate a financial transaction, like a sale, preauthorization, or credit.
     * @param {module:model/String} contentType content type
     * @param {String} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {String} apiKey 
     * @param {Number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {String} messageSignature Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256  algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {module:model/PrimaryTransaction} payload Primary Transaction request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TransactionResponse}
     */
    primaryPaymentTransaction(contentType, clientRequestId, apiKey, timestamp, messageSignature, payload) {
      return this.primaryPaymentTransactionWithHttpInfo(contentType, clientRequestId, apiKey, timestamp, messageSignature, payload)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Return/refund a transaction.
     * Use this to return/refund an existing transaction.  Partial returns are allowed.
     * @param {module:model/String} contentType content type
     * @param {String} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {String} apiKey 
     * @param {Number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {String} messageSignature Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256  algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {String} transactionId Gateway transaction identifier as returned in the parameter ipgTransactionId
     * @param {module:model/SecondaryTransaction} payload 
     * @param {Object} opts Optional parameters
     * @param {String} opts.storeId an optional outlet id for clients that support multiple store in the same developer app
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TransactionResponse} and HTTP response
     */
    returnTransactionWithHttpInfo(contentType, clientRequestId, apiKey, timestamp, messageSignature, transactionId, payload, opts) {
      opts = opts || {};
      let postBody = payload;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling returnTransaction");
      }

      // verify the required parameter 'clientRequestId' is set
      if (clientRequestId === undefined || clientRequestId === null) {
        throw new Error("Missing the required parameter 'clientRequestId' when calling returnTransaction");
      }

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling returnTransaction");
      }

      // verify the required parameter 'timestamp' is set
      if (timestamp === undefined || timestamp === null) {
        throw new Error("Missing the required parameter 'timestamp' when calling returnTransaction");
      }

      // verify the required parameter 'messageSignature' is set
      if (messageSignature === undefined || messageSignature === null) {
        throw new Error("Missing the required parameter 'messageSignature' when calling returnTransaction");
      }

      // verify the required parameter 'transactionId' is set
      if (transactionId === undefined || transactionId === null) {
        throw new Error("Missing the required parameter 'transactionId' when calling returnTransaction");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling returnTransaction");
      }


      let pathParams = {
        'transaction-id': transactionId
      };
      let queryParams = {
        'storeId': opts['storeId']
      };
      let headerParams = {
        'Content-Type': contentType,
        'Client-Request-Id': clientRequestId,
        'Api-Key': apiKey,
        'Timestamp': timestamp,
        'Message-Signature': messageSignature
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransactionResponse;

      return this.apiClient.callApi(
        '/v1/payments/{transaction-id}/return', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Return/refund a transaction.
     * Use this to return/refund an existing transaction.  Partial returns are allowed.
     * @param {module:model/String} contentType content type
     * @param {String} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {String} apiKey 
     * @param {Number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {String} messageSignature Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256  algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {String} transactionId Gateway transaction identifier as returned in the parameter ipgTransactionId
     * @param {module:model/SecondaryTransaction} payload 
     * @param {Object} opts Optional parameters
     * @param {String} opts.storeId an optional outlet id for clients that support multiple store in the same developer app
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TransactionResponse}
     */
    returnTransaction(contentType, clientRequestId, apiKey, timestamp, messageSignature, transactionId, payload, opts) {
      return this.returnTransactionWithHttpInfo(contentType, clientRequestId, apiKey, timestamp, messageSignature, transactionId, payload, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve the state of a transaction
     * Use this query to get the current state of an existing transaction.
     * @param {module:model/String} contentType content type
     * @param {String} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {String} apiKey 
     * @param {Number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {String} messageSignature Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256  algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {String} transactionId Gateway transaction identifier as returned in the parameter ipgTransactionId
     * @param {Object} opts Optional parameters
     * @param {String} opts.storeId an optional outlet id for clients that support multiple store in the same developer app
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TransactionResponse} and HTTP response
     */
    transactionInquiryWithHttpInfo(contentType, clientRequestId, apiKey, timestamp, messageSignature, transactionId, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling transactionInquiry");
      }

      // verify the required parameter 'clientRequestId' is set
      if (clientRequestId === undefined || clientRequestId === null) {
        throw new Error("Missing the required parameter 'clientRequestId' when calling transactionInquiry");
      }

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling transactionInquiry");
      }

      // verify the required parameter 'timestamp' is set
      if (timestamp === undefined || timestamp === null) {
        throw new Error("Missing the required parameter 'timestamp' when calling transactionInquiry");
      }

      // verify the required parameter 'messageSignature' is set
      if (messageSignature === undefined || messageSignature === null) {
        throw new Error("Missing the required parameter 'messageSignature' when calling transactionInquiry");
      }

      // verify the required parameter 'transactionId' is set
      if (transactionId === undefined || transactionId === null) {
        throw new Error("Missing the required parameter 'transactionId' when calling transactionInquiry");
      }


      let pathParams = {
        'transaction-id': transactionId
      };
      let queryParams = {
        'storeId': opts['storeId']
      };
      let headerParams = {
        'Content-Type': contentType,
        'Client-Request-Id': clientRequestId,
        'Api-Key': apiKey,
        'Timestamp': timestamp,
        'Message-Signature': messageSignature
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransactionResponse;

      return this.apiClient.callApi(
        '/v1/payments/{transaction-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve the state of a transaction
     * Use this query to get the current state of an existing transaction.
     * @param {module:model/String} contentType content type
     * @param {String} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {String} apiKey 
     * @param {Number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {String} messageSignature Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256  algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {String} transactionId Gateway transaction identifier as returned in the parameter ipgTransactionId
     * @param {Object} opts Optional parameters
     * @param {String} opts.storeId an optional outlet id for clients that support multiple store in the same developer app
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TransactionResponse}
     */
    transactionInquiry(contentType, clientRequestId, apiKey, timestamp, messageSignature, transactionId, opts) {
      return this.transactionInquiryWithHttpInfo(contentType, clientRequestId, apiKey, timestamp, messageSignature, transactionId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Reverse a previous action on an existing transaction
     * Use this to reverse a postauth/completion, credit, preauth, or sale.
     * @param {module:model/String} contentType content type
     * @param {String} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {String} apiKey 
     * @param {Number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {String} messageSignature Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256  algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {String} transactionId Gateway transaction identifier as returned in the parameter ipgTransactionId
     * @param {Object} opts Optional parameters
     * @param {String} opts.storeId an optional outlet id for clients that support multiple store in the same developer app
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TransactionResponse} and HTTP response
     */
    voidTransactionWithHttpInfo(contentType, clientRequestId, apiKey, timestamp, messageSignature, transactionId, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling voidTransaction");
      }

      // verify the required parameter 'clientRequestId' is set
      if (clientRequestId === undefined || clientRequestId === null) {
        throw new Error("Missing the required parameter 'clientRequestId' when calling voidTransaction");
      }

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling voidTransaction");
      }

      // verify the required parameter 'timestamp' is set
      if (timestamp === undefined || timestamp === null) {
        throw new Error("Missing the required parameter 'timestamp' when calling voidTransaction");
      }

      // verify the required parameter 'messageSignature' is set
      if (messageSignature === undefined || messageSignature === null) {
        throw new Error("Missing the required parameter 'messageSignature' when calling voidTransaction");
      }

      // verify the required parameter 'transactionId' is set
      if (transactionId === undefined || transactionId === null) {
        throw new Error("Missing the required parameter 'transactionId' when calling voidTransaction");
      }


      let pathParams = {
        'transaction-id': transactionId
      };
      let queryParams = {
        'storeId': opts['storeId']
      };
      let headerParams = {
        'Content-Type': contentType,
        'Client-Request-Id': clientRequestId,
        'Api-Key': apiKey,
        'Timestamp': timestamp,
        'Message-Signature': messageSignature
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransactionResponse;

      return this.apiClient.callApi(
        '/v1/payments/{transaction-id}/void', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Reverse a previous action on an existing transaction
     * Use this to reverse a postauth/completion, credit, preauth, or sale.
     * @param {module:model/String} contentType content type
     * @param {String} clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
     * @param {String} apiKey 
     * @param {Number} timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
     * @param {String} messageSignature Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256  algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
     * @param {String} transactionId Gateway transaction identifier as returned in the parameter ipgTransactionId
     * @param {Object} opts Optional parameters
     * @param {String} opts.storeId an optional outlet id for clients that support multiple store in the same developer app
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TransactionResponse}
     */
    voidTransaction(contentType, clientRequestId, apiKey, timestamp, messageSignature, transactionId, opts) {
      return this.voidTransactionWithHttpInfo(contentType, clientRequestId, apiKey, timestamp, messageSignature, transactionId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
