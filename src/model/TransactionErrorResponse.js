/**
 * Payment Gateway API Specification
 * Payment Gateway API for payment processing. 
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: unset
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Amount', 'model/Error', 'model/ProcessorData', 'model/ResponseType', 'model/TransactionResponse', 'model/TransactionResponseAuthenticationRedirect', 'model/TransactionType'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./Amount'), require('./Error'), require('./ProcessorData'), require('./ResponseType'), require('./TransactionResponse'), require('./TransactionResponseAuthenticationRedirect'), require('./TransactionType'));
  } else {
    // Browser globals (root is window)
    if (!root.FirstApiSdk) {
      root.FirstApiSdk = {};
    }
    root.FirstApiSdk.TransactionErrorResponse = factory(root.FirstApiSdk.ApiClient, root.FirstApiSdk.Amount, root.FirstApiSdk.Error, root.FirstApiSdk.ProcessorData, root.FirstApiSdk.ResponseType, root.FirstApiSdk.TransactionResponse, root.FirstApiSdk.TransactionResponseAuthenticationRedirect, root.FirstApiSdk.TransactionType);
  }
}(this, function(ApiClient, Amount, Error, ProcessorData, ResponseType, TransactionResponse, TransactionResponseAuthenticationRedirect, TransactionType) {
  'use strict';




  /**
   * The TransactionErrorResponse model module.
   * @module model/TransactionErrorResponse
   * @version 6.3.0
   */

  /**
   * Constructs a new <code>TransactionErrorResponse</code>.
   * @alias module:model/TransactionErrorResponse
   * @class
   * @implements module:model/TransactionResponse
   */
  var exports = function() {
    var _this = this;

    TransactionResponse.call(_this);

  };

  /**
   * Constructs a <code>TransactionErrorResponse</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/TransactionErrorResponse} obj Optional instance to populate.
   * @return {module:model/TransactionErrorResponse} The populated <code>TransactionErrorResponse</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      TransactionResponse.constructFromObject(data, obj);
      if (data.hasOwnProperty('error')) {
        obj['error'] = Error.constructFromObject(data['error']);
      }
    }
    return obj;
  }

  /**
   * @member {module:model/Error} error
   */
  exports.prototype['error'] = undefined;

  // Implement TransactionResponse interface:
  /**
   * The schema type returned in the response.
   * @member {module:model/ResponseType} responseType
   */
exports.prototype['responseType'] = undefined;

  /**
   * Echoes back the value in the Request header
   * @member {String} clientRequestId
   */
exports.prototype['clientRequestId'] = undefined;

  /**
   * Echoes back the value in the Request header
   * @member {String} apiTraceId
   */
exports.prototype['apiTraceId'] = undefined;

  /**
   * The Response Transaction ID
   * @member {String} ipgTransactionId
   */
exports.prototype['ipgTransactionId'] = undefined;

  /**
   * Client Order ID if supplied by client, otherwise the Order ID
   * @member {String} orderId
   */
exports.prototype['orderId'] = undefined;

  /**
   * @member {module:model/TransactionType} transactionType
   */
exports.prototype['transactionType'] = undefined;

  /**
   * The processor approval code for compliance.
   * @member {String} authorizationCode
   */
exports.prototype['authorizationCode'] = undefined;

  /**
   * The processor address validation response for compliance.
   * @member {String} avsResponse
   */
exports.prototype['avsResponse'] = undefined;

  /**
   * The processor card verification validation response for compliance.
   * @member {String} securityCodeResponse
   */
exports.prototype['securityCodeResponse'] = undefined;

  /**
   * Card brand of the payment instrument
   * @member {String} brand
   */
exports.prototype['brand'] = undefined;

  /**
   * Country of the card issuer
   * @member {String} country
   */
exports.prototype['country'] = undefined;

  /**
   * The terminal that is processing the transaction
   * @member {String} terminalId
   */
exports.prototype['terminalId'] = undefined;

  /**
   * The unique client Transaction ID from the Request header, if supplied
   * @member {String} clientTransactionId
   */
exports.prototype['clientTransactionId'] = undefined;

  /**
   * The transaction time in seconds since Epoch
   * @member {Number} transactionTime
   */
exports.prototype['transactionTime'] = undefined;

  /**
   * @member {module:model/Amount} approvedAmount
   */
exports.prototype['approvedAmount'] = undefined;

  /**
   * The status of the transaction. APPROVED/WAITING are returned by the endpoints.  VALIDATION_FAILED/DECLINED are errors. See ErrorResponse object for details.
   * @member {module:model/TransactionResponse.TransactionStatusEnum} transactionStatus
   */
exports.prototype['transactionStatus'] = undefined;

  /**
   * The state of the transaction.
   * @member {module:model/TransactionResponse.TransactionStateEnum} transactionState
   */
exports.prototype['transactionState'] = undefined;

  /**
   * @member {module:model/TransactionResponseAuthenticationRedirect} authenticationRedirect
   */
exports.prototype['authenticationRedirect'] = undefined;

  /**
   * The transaction id received from schemes for the initial transaction, returned for the transactions marked as \"FIRST\"
   * @member {String} schemeTransactionId
   */
exports.prototype['schemeTransactionId'] = undefined;

  /**
   * @member {module:model/ProcessorData} processor
   */
exports.prototype['processor'] = undefined;



  return exports;
}));


