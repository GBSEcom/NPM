/**
 * Payment Gateway API Specification
 * Payment Gateway API for payment processing. 
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from '../ApiClient';
import Amount from './Amount';
import Error from './Error';
import ProcessorData from './ProcessorData';
import ResponseType from './ResponseType';
import TransactionResponse from './TransactionResponse';
import TransactionResponseAuthenticationRedirect from './TransactionResponseAuthenticationRedirect';
import TransactionType from './TransactionType';





/**
* The TransactionErrorResponse model module.
* @module model/TransactionErrorResponse
* @version 6.3.0
*/
export default class TransactionErrorResponse {
    /**
    * Constructs a new <code>TransactionErrorResponse</code>.
    * @alias module:model/TransactionErrorResponse
    * @class
    * @implements module:model/TransactionResponse
    */

    constructor() {
        

        
        TransactionResponse.call(this);

        

        
    }

    /**
    * Constructs a <code>TransactionErrorResponse</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/TransactionErrorResponse} obj Optional instance to populate.
    * @return {module:model/TransactionErrorResponse} The populated <code>TransactionErrorResponse</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TransactionErrorResponse();

            
            
            TransactionResponse.constructFromObject(data, obj);

            if (data.hasOwnProperty('error')) {
                obj['error'] = Error.constructFromObject(data['error']);
            }
        }
        return obj;
    }

    /**
    * @member {module:model/Error} error
    */
    error = undefined;


    // Implement TransactionResponse interface:
    /**
    * The schema type returned in the response.
    * @member {module:model/ResponseType} responseType
    */
    responseType = undefined;
/**
    * Echoes back the value in the Request header
    * @member {String} clientRequestId
    */
    clientRequestId = undefined;
/**
    * Echoes back the value in the Request header
    * @member {String} apiTraceId
    */
    apiTraceId = undefined;
/**
    * The Response Transaction ID
    * @member {String} ipgTransactionId
    */
    ipgTransactionId = undefined;
/**
    * Client Order ID if supplied by client, otherwise the Order ID
    * @member {String} orderId
    */
    orderId = undefined;
/**
    * @member {module:model/TransactionType} transactionType
    */
    transactionType = undefined;
/**
    * The processor approval code for compliance.
    * @member {String} authorizationCode
    */
    authorizationCode = undefined;
/**
    * The processor address validation response for compliance.
    * @member {String} avsResponse
    */
    avsResponse = undefined;
/**
    * The processor card verification validation response for compliance.
    * @member {String} securityCodeResponse
    */
    securityCodeResponse = undefined;
/**
    * Card brand of the payment instrument
    * @member {String} brand
    */
    brand = undefined;
/**
    * Country of the card issuer
    * @member {String} country
    */
    country = undefined;
/**
    * The terminal that is processing the transaction
    * @member {String} terminalId
    */
    terminalId = undefined;
/**
    * The unique client Transaction ID from the Request header, if supplied
    * @member {String} clientTransactionId
    */
    clientTransactionId = undefined;
/**
    * The transaction time in seconds since Epoch
    * @member {Number} transactionTime
    */
    transactionTime = undefined;
/**
    * @member {module:model/Amount} approvedAmount
    */
    approvedAmount = undefined;
/**
    * The status of the transaction. APPROVED/WAITING are returned by the endpoints.  VALIDATION_FAILED/DECLINED are errors. See ErrorResponse object for details.
    * @member {module:model/TransactionResponse.TransactionStatusEnum} transactionStatus
    */
    transactionStatus = undefined;
/**
    * The state of the transaction.
    * @member {module:model/TransactionResponse.TransactionStateEnum} transactionState
    */
    transactionState = undefined;
/**
    * @member {module:model/TransactionResponseAuthenticationRedirect} authenticationRedirect
    */
    authenticationRedirect = undefined;
/**
    * The transaction id received from schemes for the initial transaction, returned for the transactions marked as \"FIRST\"
    * @member {String} schemeTransactionId
    */
    schemeTransactionId = undefined;
/**
    * @member {module:model/ProcessorData} processor
    */
    processor = undefined;







}


