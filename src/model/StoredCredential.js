/**
 * Payment Gateway API Specification
 * Payment Gateway API for payment processing. 
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: unset
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.FirstDataGateway) {
      root.FirstDataGateway = {};
    }
    root.FirstDataGateway.StoredCredential = factory(root.FirstDataGateway.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The StoredCredential model module.
   * @module model/StoredCredential
   * @version 1.0.0
   */

  /**
   * Constructs a new <code>StoredCredential</code>.
   * Object for sending visa store credential
   * @alias module:model/StoredCredential
   * @class
   * @param sequence {module:model/StoredCredential.SequenceEnum} Indicates if the transaction is first or subsequent. Valid values are 'FIRST' and 'SUBSEQUENT'
   * @param scheduled {Boolean} Indicates if the transaction is scheduled or part of a installment
   */
  var exports = function(sequence, scheduled) {
    var _this = this;

    _this['sequence'] = sequence;
    _this['scheduled'] = scheduled;


  };

  /**
   * Constructs a <code>StoredCredential</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/StoredCredential} obj Optional instance to populate.
   * @return {module:model/StoredCredential} The populated <code>StoredCredential</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('sequence')) {
        obj['sequence'] = ApiClient.convertToType(data['sequence'], 'String');
      }
      if (data.hasOwnProperty('scheduled')) {
        obj['scheduled'] = ApiClient.convertToType(data['scheduled'], 'Boolean');
      }
      if (data.hasOwnProperty('referencedSchemeTransactionId')) {
        obj['referencedSchemeTransactionId'] = ApiClient.convertToType(data['referencedSchemeTransactionId'], 'String');
      }
      if (data.hasOwnProperty('initiator')) {
        obj['initiator'] = ApiClient.convertToType(data['initiator'], 'String');
      }
    }
    return obj;
  }

  /**
   * Indicates if the transaction is first or subsequent. Valid values are 'FIRST' and 'SUBSEQUENT'
   * @member {module:model/StoredCredential.SequenceEnum} sequence
   */
  exports.prototype['sequence'] = undefined;
  /**
   * Indicates if the transaction is scheduled or part of a installment
   * @member {Boolean} scheduled
   */
  exports.prototype['scheduled'] = undefined;
  /**
   * The transaction id received from schemes for the initial transaction. Required if sequence is 'SUBSEQUENT'
   * @member {String} referencedSchemeTransactionId
   */
  exports.prototype['referencedSchemeTransactionId'] = undefined;
  /**
   * Indicates whether it is a merchant initiated or explicitly consented by card holder. Valid values are 'MERCHANT' and 'CARDHOLDER'
   * @member {module:model/StoredCredential.InitiatorEnum} initiator
   */
  exports.prototype['initiator'] = undefined;


  /**
   * Allowed values for the <code>sequence</code> property.
   * @enum {String}
   * @readonly
   */
  exports.SequenceEnum = {
    /**
     * value: "FIRST"
     * @const
     */
    "FIRST": "FIRST",
    /**
     * value: "SUBSEQUENT"
     * @const
     */
    "SUBSEQUENT": "SUBSEQUENT"  };

  /**
   * Allowed values for the <code>initiator</code> property.
   * @enum {String}
   * @readonly
   */
  exports.InitiatorEnum = {
    /**
     * value: "MERCHANT"
     * @const
     */
    "MERCHANT": "MERCHANT",
    /**
     * value: "CARDHOLDER"
     * @const
     */
    "CARDHOLDER": "CARDHOLDER"  };


  return exports;
}));


